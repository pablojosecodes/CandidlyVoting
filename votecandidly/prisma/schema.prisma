generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}


model events {
  internalid              String                    @id @db.VarChar(255)
  title                   String                    @db.VarChar(255)
  directionslink          String?                   @db.VarChar(255)
  type                    String?                   @db.VarChar(255)
  displaytitle            String?                   @db.VarChar(255)
  displaydescription      String?                   @db.VarChar(255)
  location                String?                   @db.VarChar(255)
  dropdowns               Json?                     @db.Json
  description             String?
  platform                String?                   @db.VarChar(255)
  lastupdated             DateTime                  @default(now()) @db.Timestamp(6)
  hosters                 String?
  eventlink               String?                   @db.VarChar(255)
  imageurl                String?                   @db.VarChar(255)
  homepagetags            String?                   @db.VarChar(255)
  eventdate               DateTime?                 @db.Timestamp(6)
  eventstarttime          DateTime?                 @db.Timestamp(6)
  eventendtime            DateTime?                 @db.Timestamp(6)
  investor                Boolean?                  @default(false)
  builder                 Boolean?                  @default(false)
  fun                     Boolean?                  @default(false)
  timestampstart          DateTime?                 @db.Timestamp(6)
  timestampend            DateTime?                 @db.Timestamp(6)
  funlover                Boolean?                  @default(false)
  embedding               Unsupported("vector")?
  user_event_interactions user_event_interactions[]
}

model feedback {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  user_id    String?   @db.VarChar
  feedback   String
}

model onboarding {
  title      String? @db.VarChar
  link       String? @db.VarChar(255)
  imageurl   String? @db.VarChar
  day        String? @db.VarChar
  month      String? @db.VarChar
  kind       String? @db.VarChar
  location   String? @db.VarChar
  time       String? @db.VarChar
  internalid Int     @id @default(autoincrement())
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user_event_interactions {
  interaction_id   Int       @id @default(autoincrement())
  user_id          String    @db.VarChar(255)
  internalid       String    @db.VarChar(255)
  interaction_type String    @db.VarChar(50)
  timestamp        DateTime? @default(now()) @db.Timestamptz(6)
  events           events    @relation(fields: [internalid], references: [internalid], onDelete: Cascade, onUpdate: NoAction)
  users            users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id                 String                    @unique @db.VarChar(255)
  username                String                    @db.VarChar(255)
  email                   String                    @db.VarChar(255)
  date_joined             DateTime?                 @default(now()) @db.Timestamptz(6)
  tech_event_preferences  tech_event_preference[]   @default([])
  fun_event_preferences   fun_event_preference[]    @default([])
  personal_goals          personal_goal[]           @default([])
  career                  career_option[]
  linkedin_profile        String?                   @db.VarChar(255)
  twitter_profile         String?                   @db.VarChar(255)
  onboarded               Boolean?                  @default(false)
  preferences             Json?                     @db.Json
  embedding               Unsupported("vector")?
  discovery_source        discovery_source_option[]
  subscribed              Boolean?                  @default(false)
  interest                Boolean?                  @default(true)
  user_event_interactions user_event_interactions[]
}

enum career_option {
  VC
  Tech
  LawMed
  Academia
  Student
}

enum discovery_source_option {
  Hacker_News @map("Hacker News")
  Friend
  Google
  The_creator @map("The creator")
  Other
}

enum fun_event_preference {
  CONCERT
  SPORT
  PARTY
  ART
}

enum fun_event_preference_new {
  Concert___Music @map("Concert / Music")
  Sports
  Parties
  Arts
}

enum personal_goal {
  FRIENDS
  LOVE
  TECH
  FUN
}

enum personal_goal_new {
  Make_friends @map("Make friends")
  See_tech     @map("See tech")
  Fall_in_love @map("Fall in love")
  Have_fun     @map("Have fun")
}

enum tech_event_preference {
  HACKATHON
  DEMO
  VC_NETWORK
  TALK_QA
  HIKE_WALK
}

enum tech_event_preference_new {
  Hackathon
  Demos
  Networking
  Talks
  Hike___Walk @map("Hike / Walk")
}
