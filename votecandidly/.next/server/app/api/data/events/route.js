"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/data/events/route";
exports.ids = ["app/api/data/events/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:buffer");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:http");

/***/ }),

/***/ "node:https":
/*!*****************************!*\
  !*** external "node:https" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node:https");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:net");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:zlib");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("process");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdata%2Fevents%2Froute&page=%2Fapi%2Fdata%2Fevents%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdata%2Fevents%2Froute.ts&appDir=%2FUsers%2Fvicky%2FSpain%2FCandidly%2Fvotecandidly%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvicky%2FSpain%2FCandidly%2Fvotecandidly&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdata%2Fevents%2Froute&page=%2Fapi%2Fdata%2Fevents%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdata%2Fevents%2Froute.ts&appDir=%2FUsers%2Fvicky%2FSpain%2FCandidly%2Fvotecandidly%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvicky%2FSpain%2FCandidly%2Fvotecandidly&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_vicky_Spain_Candidly_votecandidly_app_api_data_events_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/data/events/route.ts */ \"(rsc)/./app/api/data/events/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/data/events/route\",\n        pathname: \"/api/data/events\",\n        filename: \"route\",\n        bundlePath: \"app/api/data/events/route\"\n    },\n    resolvedPagePath: \"/Users/vicky/Spain/Candidly/votecandidly/app/api/data/events/route.ts\",\n    nextConfigOutput,\n    userland: _Users_vicky_Spain_Candidly_votecandidly_app_api_data_events_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/data/events/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZkYXRhJTJGZXZlbnRzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZkYXRhJTJGZXZlbnRzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZGF0YSUyRmV2ZW50cyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnZpY2t5JTJGU3BhaW4lMkZDYW5kaWRseSUyRnZvdGVjYW5kaWRseSUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZ2aWNreSUyRlNwYWluJTJGQ2FuZGlkbHklMkZ2b3RlY2FuZGlkbHkmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDcUI7QUFDbEc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1R0FBdUc7QUFDL0c7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUM2Sjs7QUFFN0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uYW1lLz81Y2I3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy92aWNreS9TcGFpbi9DYW5kaWRseS92b3RlY2FuZGlkbHkvYXBwL2FwaS9kYXRhL2V2ZW50cy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZGF0YS9ldmVudHMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kYXRhL2V2ZW50c1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvZGF0YS9ldmVudHMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvdmlja3kvU3BhaW4vQ2FuZGlkbHkvdm90ZWNhbmRpZGx5L2FwcC9hcGkvZGF0YS9ldmVudHMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvZGF0YS9ldmVudHMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0LCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdata%2Fevents%2Froute&page=%2Fapi%2Fdata%2Fevents%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdata%2Fevents%2Froute.ts&appDir=%2FUsers%2Fvicky%2FSpain%2FCandidly%2Fvotecandidly%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvicky%2FSpain%2FCandidly%2Fvotecandidly&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/data/events/route.ts":
/*!**************************************!*\
  !*** ./app/api/data/events/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var _utils_db_getCurrentUser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/db/getCurrentUser */ \"(rsc)/./utils/db/getCurrentUser.ts\");\n/* harmony import */ var _utils_getsend_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/getsend/models */ \"(rsc)/./utils/getsend/models.ts\");\n\n\nasync function POST(request) {\n    const req = await request.json();\n    const { onboarding, builder, funlover, investor, page, pageSize } = req;\n    let user = null;\n    try {\n        user = await (0,_utils_db_getCurrentUser__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n    } catch  {}\n    const replacer = (key, value)=>typeof value === \"bigint\" ? value.toString() : value;\n    let events;\n    if (!onboarding && user) {\n        events = await (0,_utils_getsend_models__WEBPACK_IMPORTED_MODULE_1__.getEvents)(user.user_id, undefined, builder, funlover, investor, page, pageSize);\n    } else {\n        // Assuming this is meant for all other cases, including onboarding\n        events = await (0,_utils_getsend_models__WEBPACK_IMPORTED_MODULE_1__.getEvents)(undefined, undefined, builder, funlover, investor, page, pageSize);\n    }\n    // console.log(\"Events:\", events);\n    const response = new Response(JSON.stringify(events, replacer), {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    return response;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2RhdGEvZXZlbnRzL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUN1RDtBQUN3QjtBQUt4RSxlQUFlRSxLQUFLQyxPQUFnQjtJQUN2QyxNQUFNQyxNQUFNLE1BQU1ELFFBQVFFLElBQUk7SUFDOUIsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFLEdBQUdQO0lBRXBFLElBQUlRLE9BQXFCO0lBQ3pCLElBQUk7UUFDQUEsT0FBTyxNQUFNWixvRUFBY0E7SUFDL0IsRUFBRSxPQUFNLENBQW1DO0lBRTNDLE1BQU1hLFdBQVcsQ0FBQ0MsS0FBVUMsUUFDeEIsT0FBUUEsVUFBVSxXQUFZQSxNQUFNQyxRQUFRLEtBQUtEO0lBRXJELElBQUlFO0lBR0osSUFBSSxDQUFDWCxjQUFjTSxNQUFNO1FBRXJCSyxTQUFTLE1BQU1oQixnRUFBU0EsQ0FBQ1csS0FBS00sT0FBTyxFQUFFQyxXQUFXWixTQUFTQyxVQUFVQyxVQUFVQyxNQUFNQztJQUN6RixPQUFPO1FBQ0gsbUVBQW1FO1FBQ25FTSxTQUFTLE1BQU1oQixnRUFBU0EsQ0FBQ2tCLFdBQVdBLFdBQVdaLFNBQVNDLFVBQVVDLFVBQVVDLE1BQU1DO0lBQ3RGO0lBR0Esa0NBQWtDO0lBQ2xDLE1BQU1TLFdBQVcsSUFBSUMsU0FBU0MsS0FBS0MsU0FBUyxDQUFDTixRQUFRSixXQUFXO1FBQzVEVyxTQUFTO1lBQUUsZ0JBQWdCO1FBQW1CO0lBQ2xEO0lBRUEsT0FBT0o7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL25hbWUvLi9hcHAvYXBpL2RhdGEvZXZlbnRzL3JvdXRlLnRzP2E2ODAiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgZ2V0Q3VycmVudFVzZXIgZnJvbSBcIkAvdXRpbHMvZGIvZ2V0Q3VycmVudFVzZXJcIjtcbmltcG9ydCB7IGdldEV2ZW50cywgZ2V0TG9ncywgZ2V0UHJvamVjdHNieVVzZXIgfSBmcm9tIFwiQC91dGlscy9nZXRzZW5kL21vZGVsc1wiO1xuaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgb25ib2FyZGluZywgdXNlcnMgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogUmVxdWVzdCkge1xuICAgIGNvbnN0IHJlcSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIGNvbnN0IHsgb25ib2FyZGluZywgYnVpbGRlciwgZnVubG92ZXIsIGludmVzdG9yLCBwYWdlLCBwYWdlU2l6ZSB9ID0gcmVxO1xuXG4gICAgbGV0IHVzZXI6IHVzZXJzIHwgbnVsbCA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgICAgdXNlciA9IGF3YWl0IGdldEN1cnJlbnRVc2VyKCk7XG4gICAgfSBjYXRjaCB7IC8qIEhhbmRsZSBlcnJvcnMgaWYgbmVjZXNzYXJ5ICovIH1cblxuICAgIGNvbnN0IHJlcGxhY2VyID0gKGtleTogYW55LCB2YWx1ZTogYW55KSA9PlxuICAgICAgICAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50JykgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWU7XG5cbiAgICBsZXQgZXZlbnRzO1xuXG5cbiAgICBpZiAoIW9uYm9hcmRpbmcgJiYgdXNlcikge1xuXG4gICAgICAgIGV2ZW50cyA9IGF3YWl0IGdldEV2ZW50cyh1c2VyLnVzZXJfaWQsIHVuZGVmaW5lZCwgYnVpbGRlciwgZnVubG92ZXIsIGludmVzdG9yLCBwYWdlLCBwYWdlU2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXNzdW1pbmcgdGhpcyBpcyBtZWFudCBmb3IgYWxsIG90aGVyIGNhc2VzLCBpbmNsdWRpbmcgb25ib2FyZGluZ1xuICAgICAgICBldmVudHMgPSBhd2FpdCBnZXRFdmVudHModW5kZWZpbmVkLCB1bmRlZmluZWQsIGJ1aWxkZXIsIGZ1bmxvdmVyLCBpbnZlc3RvciwgcGFnZSwgcGFnZVNpemUpO1xuICAgIH1cblxuXG4gICAgLy8gY29uc29sZS5sb2coXCJFdmVudHM6XCIsIGV2ZW50cyk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZXZlbnRzLCByZXBsYWNlciksIHtcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbn1cbiJdLCJuYW1lcyI6WyJnZXRDdXJyZW50VXNlciIsImdldEV2ZW50cyIsIlBPU1QiLCJyZXF1ZXN0IiwicmVxIiwianNvbiIsIm9uYm9hcmRpbmciLCJidWlsZGVyIiwiZnVubG92ZXIiLCJpbnZlc3RvciIsInBhZ2UiLCJwYWdlU2l6ZSIsInVzZXIiLCJyZXBsYWNlciIsImtleSIsInZhbHVlIiwidG9TdHJpbmciLCJldmVudHMiLCJ1c2VyX2lkIiwidW5kZWZpbmVkIiwicmVzcG9uc2UiLCJSZXNwb25zZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJoZWFkZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/data/events/route.ts\n");

/***/ }),

/***/ "(rsc)/./prisma/prismaClient.ts":
/*!********************************!*\
  !*** ./prisma/prismaClient.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nlet prisma;\nif (false) {} else {\n    if (!global.prisma) {\n        global.prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\n    }\n    prisma = global.prisma;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9wcmlzbWEvcHJpc21hQ2xpZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUU5QyxJQUFJQztBQUVKLElBQUlDLEtBQXlCLEVBQWMsRUFFMUMsTUFBTTtJQUNILElBQUksQ0FBQ0MsT0FBT0YsTUFBTSxFQUFFO1FBQ2hCRSxPQUFPRixNQUFNLEdBQUcsSUFBSUQsd0RBQVlBO0lBQ3BDO0lBQ0FDLFNBQVNFLE9BQU9GLE1BQU07QUFDMUI7QUFFQSxpRUFBZUEsTUFBTUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25hbWUvLi9wcmlzbWEvcHJpc21hQ2xpZW50LnRzP2IxM2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG5sZXQgcHJpc21hOiBQcmlzbWFDbGllbnQ7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJpc21hID0gbmV3IFByaXNtYUNsaWVudCgpO1xufSBlbHNlIHtcbiAgICBpZiAoIWdsb2JhbC5wcmlzbWEpIHtcbiAgICAgICAgZ2xvYmFsLnByaXNtYSA9IG5ldyBQcmlzbWFDbGllbnQoKTtcbiAgICB9XG4gICAgcHJpc21hID0gZ2xvYmFsLnByaXNtYTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcHJpc21hOyJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJwcm9jZXNzIiwiZ2xvYmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./prisma/prismaClient.ts\n");

/***/ }),

/***/ "(rsc)/./utils/db/getCurrentUser.ts":
/*!************************************!*\
  !*** ./utils/db/getCurrentUser.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getCurrentUser)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _clerk_nextjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @clerk/nextjs */ \"(rsc)/./node_modules/@clerk/nextjs/dist/esm/index.js\");\n\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nasync function getCurrentUser() {\n    console.log(\"GETTING CURRENT USER\");\n    const currentUserData = await (0,_clerk_nextjs__WEBPACK_IMPORTED_MODULE_1__.currentUser)();\n    if (!currentUserData) {\n        return null;\n    }\n    try {\n        console.log(currentUserData.id);\n        let user = await prisma.users.findUnique({\n            where: {\n                user_id: currentUserData.id\n            }\n        });\n        if (!user) {\n            // If user does not exist, create a new user\n            user = await prisma.users.create({\n                data: {\n                    user_id: currentUserData.id,\n                    email: currentUserData.emailAddresses[0].emailAddress,\n                    username: currentUserData.username || \"default\"\n                }\n            });\n        }\n        return user;\n    } catch (error) {\n        console.error(\"Error fetching or creating user:\", error);\n        return null;\n    }\n} // import { GetCommandOutput, PutCommand } from '@aws-sdk/lib-dynamodb';\n // import { GetCommand } from '@aws-sdk/lib-dynamodb';\n // import { currentUser } from '@clerk/nextjs';\n // import { db } from '@/utils/config';\n // export default async function getCurrentUser() {\n //     console.log(\"GETTING CURRNET USER\")\n //     const currentUserData = await currentUser();\n //     if (!currentUserData) {\n //         return null;\n //     }\n //     try {\n //         const { Item: user } = await db.send(\n //             new GetCommand({\n //                 TableName: \"CitrusUserIDs\",\n //                 Key: {\n //                     userId: currentUserData.id\n //                 },\n //             })\n //         if (!user) {\n //             const newUser = await db.send(\n //                 new PutCommand({\n //                     TableName: \"CitrusUserIDs\", // Make sure this matches the table name exactly\n //                     Item: {\n //                         userId: currentUserData.id, // This should match your partition key name\n //                         email: currentUserData.emailAddresses[0].emailAddress,\n //                         createdAt: currentUserData.createdAt,\n //                         plan: 'FREE',\n //                         currentCreditConsumption: 0,\n //                         currentCredits: 0,\n //                         extraCredits: 0,\n //                         firstName: currentUserData.firstName,\n //                         lastName: currentUserData.lastName,\n //                         marketingEmail: currentUserData.emailAddresses[0].emailAddress,\n //                         subscriptionStatus: \"ACTIVE\"\n //                     },\n //                 })\n //             ) as IGetCommandOutput<IUser>;\n //             return newUser;\n //             return newUser\n //             // throw new Error(`User with ID ${userId} not found.`);\n //         }\n //         return user;\n //     } catch (error) {\n //         console.error(\"Error fetching user:\", error);\n //         throw error; // Re-throw the error to be handled by the caller\n //         // return false;\n //     }\n //     // const { Item: user } = (await db.send(\n //     //     new GetCommand({\n //     //         TableName: \"CitrusUsersID\",\n //     //         Key: {\n //     //             pk: `${currentUserData?.id}`,\n //     //             sk: `${currentUserData?.id}`,\n //     //         },\n //     //     })\n //     // ))\n //     // return user;\n // }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi91dGlscy9kYi9nZXRDdXJyZW50VXNlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXFEO0FBQ1Q7QUFFNUMsTUFBTUUsU0FBUyxJQUFJRix3REFBWUE7QUFFaEIsZUFBZUc7SUFDMUJDLFFBQVFDLEdBQUcsQ0FBQztJQUNaLE1BQU1DLGtCQUFrQixNQUFNTCwwREFBV0E7SUFFekMsSUFBSSxDQUFDSyxpQkFBaUI7UUFDbEIsT0FBTztJQUNYO0lBRUEsSUFBSTtRQUNBRixRQUFRQyxHQUFHLENBQUNDLGdCQUFnQkMsRUFBRTtRQUM5QixJQUFJQyxPQUFxQixNQUFNTixPQUFPTyxLQUFLLENBQUNDLFVBQVUsQ0FBQztZQUNuREMsT0FBTztnQkFBRUMsU0FBU04sZ0JBQWdCQyxFQUFFO1lBQUM7UUFDekM7UUFFQSxJQUFJLENBQUNDLE1BQU07WUFDUCw0Q0FBNEM7WUFDNUNBLE9BQU8sTUFBTU4sT0FBT08sS0FBSyxDQUFDSSxNQUFNLENBQUM7Z0JBQzdCQyxNQUFNO29CQUNGRixTQUFTTixnQkFBZ0JDLEVBQUU7b0JBQzNCUSxPQUFPVCxnQkFBZ0JVLGNBQWMsQ0FBQyxFQUFFLENBQUNDLFlBQVk7b0JBQ3JEQyxVQUFVWixnQkFBZ0JZLFFBQVEsSUFBSTtnQkFHMUM7WUFDSjtRQUNKO1FBR0EsT0FBT1Y7SUFFWCxFQUFFLE9BQU9XLE9BQU87UUFDWmYsUUFBUWUsS0FBSyxDQUFDLG9DQUFvQ0E7UUFDbEQsT0FBTztJQUNYO0FBQ0osRUFLQSx3RUFBd0U7Q0FDeEUsc0RBQXNEO0NBQ3RELCtDQUErQztDQUMvQyx1Q0FBdUM7Q0FPdkMsbURBQW1EO0NBQ25ELDBDQUEwQztDQUMxQyxtREFBbUQ7Q0FFbkQsOEJBQThCO0NBQzlCLHVCQUF1QjtDQUN2QixRQUFRO0NBRVIsWUFBWTtDQUNaLGdEQUFnRDtDQUNoRCwrQkFBK0I7Q0FDL0IsOENBQThDO0NBQzlDLHlCQUF5QjtDQUN6QixpREFBaUQ7Q0FDakQscUJBQXFCO0NBQ3JCLGlCQUFpQjtDQUlqQix1QkFBdUI7Q0FDdkIsNkNBQTZDO0NBQzdDLG1DQUFtQztDQUNuQyxtR0FBbUc7Q0FDbkcsOEJBQThCO0NBQzlCLG1HQUFtRztDQUNuRyxpRkFBaUY7Q0FDakYsZ0VBQWdFO0NBQ2hFLHdDQUF3QztDQUN4Qyx1REFBdUQ7Q0FDdkQsNkNBQTZDO0NBQzdDLDJDQUEyQztDQUMzQyxnRUFBZ0U7Q0FDaEUsOERBQThEO0NBQzlELDBGQUEwRjtDQUMxRix1REFBdUQ7Q0FDdkQseUJBQXlCO0NBQ3pCLHFCQUFxQjtDQUVyQiw2Q0FBNkM7Q0FDN0MsOEJBQThCO0NBRTlCLDZCQUE2QjtDQUM3Qix1RUFBdUU7Q0FDdkUsWUFBWTtDQUNaLHVCQUF1QjtDQUN2Qix3QkFBd0I7Q0FDeEIsd0RBQXdEO0NBRXhELHlFQUF5RTtDQUN6RSwyQkFBMkI7Q0FDM0IsUUFBUTtDQUlSLGdEQUFnRDtDQUNoRCw4QkFBOEI7Q0FDOUIsNkNBQTZDO0NBQzdDLHdCQUF3QjtDQUN4QixtREFBbUQ7Q0FDbkQsbURBQW1EO0NBQ25ELG9CQUFvQjtDQUNwQixnQkFBZ0I7Q0FDaEIsWUFBWTtDQUVaLHNCQUFzQjtDQUN0QixJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmFtZS8uL3V0aWxzL2RiL2dldEN1cnJlbnRVc2VyLnRzP2IzMjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50LCB1c2VycyB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcbmltcG9ydCB7IGN1cnJlbnRVc2VyIH0gZnJvbSAnQGNsZXJrL25leHRqcyc7XG5cbmNvbnN0IHByaXNtYSA9IG5ldyBQcmlzbWFDbGllbnQoKTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZ2V0Q3VycmVudFVzZXIoKSB7XG4gICAgY29uc29sZS5sb2coXCJHRVRUSU5HIENVUlJFTlQgVVNFUlwiKVxuICAgIGNvbnN0IGN1cnJlbnRVc2VyRGF0YSA9IGF3YWl0IGN1cnJlbnRVc2VyKCk7XG5cbiAgICBpZiAoIWN1cnJlbnRVc2VyRGF0YSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZyhjdXJyZW50VXNlckRhdGEuaWQpXG4gICAgICAgIGxldCB1c2VyOiB1c2VycyB8IG51bGwgPSBhd2FpdCBwcmlzbWEudXNlcnMuZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICB3aGVyZTogeyB1c2VyX2lkOiBjdXJyZW50VXNlckRhdGEuaWQgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgICAgIC8vIElmIHVzZXIgZG9lcyBub3QgZXhpc3QsIGNyZWF0ZSBhIG5ldyB1c2VyXG4gICAgICAgICAgICB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXJzLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiBjdXJyZW50VXNlckRhdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBjdXJyZW50VXNlckRhdGEuZW1haWxBZGRyZXNzZXNbMF0uZW1haWxBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogY3VycmVudFVzZXJEYXRhLnVzZXJuYW1lIHx8IFwiZGVmYXVsdFwiLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBvdGhlciBmaWVsZHMgYXMgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiB1c2VyO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIG9yIGNyZWF0aW5nIHVzZXI6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG59XG5cblxuXG5cbi8vIGltcG9ydCB7IEdldENvbW1hbmRPdXRwdXQsIFB1dENvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9saWItZHluYW1vZGInO1xuLy8gaW1wb3J0IHsgR2V0Q29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2xpYi1keW5hbW9kYic7XG4vLyBpbXBvcnQgeyBjdXJyZW50VXNlciB9IGZyb20gJ0BjbGVyay9uZXh0anMnO1xuLy8gaW1wb3J0IHsgZGIgfSBmcm9tICdAL3V0aWxzL2NvbmZpZyc7XG5cblxuXG5cblxuXG4vLyBleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBnZXRDdXJyZW50VXNlcigpIHtcbi8vICAgICBjb25zb2xlLmxvZyhcIkdFVFRJTkcgQ1VSUk5FVCBVU0VSXCIpXG4vLyAgICAgY29uc3QgY3VycmVudFVzZXJEYXRhID0gYXdhaXQgY3VycmVudFVzZXIoKTtcblxuLy8gICAgIGlmICghY3VycmVudFVzZXJEYXRhKSB7XG4vLyAgICAgICAgIHJldHVybiBudWxsO1xuLy8gICAgIH1cblxuLy8gICAgIHRyeSB7XG4vLyAgICAgICAgIGNvbnN0IHsgSXRlbTogdXNlciB9ID0gYXdhaXQgZGIuc2VuZChcbi8vICAgICAgICAgICAgIG5ldyBHZXRDb21tYW5kKHtcbi8vICAgICAgICAgICAgICAgICBUYWJsZU5hbWU6IFwiQ2l0cnVzVXNlcklEc1wiLFxuLy8gICAgICAgICAgICAgICAgIEtleToge1xuLy8gICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IGN1cnJlbnRVc2VyRGF0YS5pZFxuLy8gICAgICAgICAgICAgICAgIH0sXG4vLyAgICAgICAgICAgICB9KVxuXG5cblxuLy8gICAgICAgICBpZiAoIXVzZXIpIHtcbi8vICAgICAgICAgICAgIGNvbnN0IG5ld1VzZXIgPSBhd2FpdCBkYi5zZW5kKFxuLy8gICAgICAgICAgICAgICAgIG5ldyBQdXRDb21tYW5kKHtcbi8vICAgICAgICAgICAgICAgICAgICAgVGFibGVOYW1lOiBcIkNpdHJ1c1VzZXJJRHNcIiwgLy8gTWFrZSBzdXJlIHRoaXMgbWF0Y2hlcyB0aGUgdGFibGUgbmFtZSBleGFjdGx5XG4vLyAgICAgICAgICAgICAgICAgICAgIEl0ZW06IHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJZDogY3VycmVudFVzZXJEYXRhLmlkLCAvLyBUaGlzIHNob3VsZCBtYXRjaCB5b3VyIHBhcnRpdGlvbiBrZXkgbmFtZVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGN1cnJlbnRVc2VyRGF0YS5lbWFpbEFkZHJlc3Nlc1swXS5lbWFpbEFkZHJlc3MsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IGN1cnJlbnRVc2VyRGF0YS5jcmVhdGVkQXQsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBwbGFuOiAnRlJFRScsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q3JlZGl0Q29uc3VtcHRpb246IDAsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q3JlZGl0czogMCxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhQ3JlZGl0czogMCxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogY3VycmVudFVzZXJEYXRhLmZpcnN0TmFtZSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lOiBjdXJyZW50VXNlckRhdGEubGFzdE5hbWUsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXRpbmdFbWFpbDogY3VycmVudFVzZXJEYXRhLmVtYWlsQWRkcmVzc2VzWzBdLmVtYWlsQWRkcmVzcyxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvblN0YXR1czogXCJBQ1RJVkVcIlxuLy8gICAgICAgICAgICAgICAgICAgICB9LFxuLy8gICAgICAgICAgICAgICAgIH0pXG5cbi8vICAgICAgICAgICAgICkgYXMgSUdldENvbW1hbmRPdXRwdXQ8SVVzZXI+O1xuLy8gICAgICAgICAgICAgcmV0dXJuIG5ld1VzZXI7XG5cbi8vICAgICAgICAgICAgIHJldHVybiBuZXdVc2VyXG4vLyAgICAgICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoYFVzZXIgd2l0aCBJRCAke3VzZXJJZH0gbm90IGZvdW5kLmApO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIHJldHVybiB1c2VyO1xuLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4vLyAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyB1c2VyOlwiLCBlcnJvcik7XG5cbi8vICAgICAgICAgdGhyb3cgZXJyb3I7IC8vIFJlLXRocm93IHRoZSBlcnJvciB0byBiZSBoYW5kbGVkIGJ5IHRoZSBjYWxsZXJcbi8vICAgICAgICAgLy8gcmV0dXJuIGZhbHNlO1xuLy8gICAgIH1cblxuXG5cbi8vICAgICAvLyBjb25zdCB7IEl0ZW06IHVzZXIgfSA9IChhd2FpdCBkYi5zZW5kKFxuLy8gICAgIC8vICAgICBuZXcgR2V0Q29tbWFuZCh7XG4vLyAgICAgLy8gICAgICAgICBUYWJsZU5hbWU6IFwiQ2l0cnVzVXNlcnNJRFwiLFxuLy8gICAgIC8vICAgICAgICAgS2V5OiB7XG4vLyAgICAgLy8gICAgICAgICAgICAgcGs6IGAke2N1cnJlbnRVc2VyRGF0YT8uaWR9YCxcbi8vICAgICAvLyAgICAgICAgICAgICBzazogYCR7Y3VycmVudFVzZXJEYXRhPy5pZH1gLFxuLy8gICAgIC8vICAgICAgICAgfSxcbi8vICAgICAvLyAgICAgfSlcbi8vICAgICAvLyApKVxuXG4vLyAgICAgLy8gcmV0dXJuIHVzZXI7XG4vLyB9Il0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsImN1cnJlbnRVc2VyIiwicHJpc21hIiwiZ2V0Q3VycmVudFVzZXIiLCJjb25zb2xlIiwibG9nIiwiY3VycmVudFVzZXJEYXRhIiwiaWQiLCJ1c2VyIiwidXNlcnMiLCJmaW5kVW5pcXVlIiwid2hlcmUiLCJ1c2VyX2lkIiwiY3JlYXRlIiwiZGF0YSIsImVtYWlsIiwiZW1haWxBZGRyZXNzZXMiLCJlbWFpbEFkZHJlc3MiLCJ1c2VybmFtZSIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./utils/db/getCurrentUser.ts\n");

/***/ }),

/***/ "(rsc)/./utils/getsend/models.ts":
/*!*********************************!*\
  !*** ./utils/getsend/models.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   archiveEvent: () => (/* binding */ archiveEvent),\n/* harmony export */   eventToStructure: () => (/* binding */ eventToStructure),\n/* harmony export */   getAgenda: () => (/* binding */ getAgenda),\n/* harmony export */   getDeploymentsByProjectIds: () => (/* binding */ getDeploymentsByProjectIds),\n/* harmony export */   getEvents: () => (/* binding */ getEvents),\n/* harmony export */   getLogs: () => (/* binding */ getLogs),\n/* harmony export */   getProjectsbyUser: () => (/* binding */ getProjectsbyUser),\n/* harmony export */   magicSearchEvents: () => (/* binding */ magicSearchEvents),\n/* harmony export */   searchEvents: () => (/* binding */ searchEvents),\n/* harmony export */   updateUser: () => (/* binding */ updateUser)\n/* harmony export */ });\n/* harmony import */ var _utils_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/openai */ \"(rsc)/./utils/openai.ts\");\n/* harmony import */ var _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/prisma/prismaClient */ \"(rsc)/./prisma/prismaClient.ts\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_2__);\n// import { OpenAIApi, Configuration } from \"openai\";\n\n// import { OpenAIApi, ChatCompletionCreateRequest, CreateChatCompletionResponse } from 'openai';\n\n\nconst getProjectsbyUser = async (userID)=>{\n    console.log(\"RET\");\n    // const videos = await prisma.projects.findMany({ \n    //     where: {\n    //         user_id: userID,\n    //     },\n    //     orderBy: {\n    //         project_name: 'asc', // or any other field you want to sort by\n    //     },\n    // });\n    // return videos;\n    return null;\n};\nconst getLogs = async (deploymentId)=>{\n    // console.log(\"GETING LOGS \")\n    // console.log(deploymentId)\n    // const videos = await prisma.logs.findMany({\n    //     where: {\n    //         deployment_id: deploymentId,\n    //     },\n    //     orderBy: {\n    //         log_id: 'asc', // or any other field you want to sort by\n    //     },\n    // });\n    // return videos;\n    return null;\n};\nasync function updateUser(userId, updates) {\n    try {\n        // Check for the validity of the userId\n        if (!userId) {\n            throw new Error(\"Invalid user ID\");\n        }\n        // Optionally, validate individual fields here. For example:\n        // if (updates.email && !isValidEmail(updates.email)) {\n        //   throw new Error('Invalid email address');\n        // }\n        // Perform the update\n        const updatedUser = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].users.update({\n            where: {\n                user_id: userId\n            },\n            data: updates\n        });\n        console.log(\"User updated successfully:\", updatedUser);\n    } catch (error) {\n        console.error(\"Error updating user:\", error);\n    }\n}\nconst archiveEvent = async (user_id, event_id, action)=>{\n    try {\n        // Create a new record in 'user_event_interactions' with interaction_type 'archived'\n        const archivedEvent = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].user_event_interactions.create({\n            data: {\n                user_id: user_id,\n                internalid: event_id,\n                interaction_type: action\n            }\n        });\n        console.log(\"Event archived:\", archivedEvent);\n    } catch (error) {\n        console.error(\"Error archiving event:\", error);\n        // Handle or throw error appropriately\n        throw error;\n    }\n};\n// interface EventStructure {\n//     start?: string;\n//     end?: string;\n//     unknown?: boolean;\n//     search?: string;\n// }\nasync function eventToStructure(event) {\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, \"0\");\n    var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n    var yyyy = today.getFullYear();\n    const currentDate = mm + \"/\" + dd + \"/\" + yyyy;\n    console.log(currentDate);\n    console.log(\"YYYYYYY\");\n    // Create the system and user messages for date and time extraction\n    let systemMessage = {\n        role: \"system\",\n        content: \"You are a helpful assistant designed to output JSON.\"\n    };\n    let userMessage = {\n        role: \"user\",\n        content: `Today's date is ${currentDate}. What are the start and end timestamps for an event described as '${event}' in ISO 8601 format? Keys should be 'start' and 'end' unless you can't decipher the times. In which case return with key 'unknown' and value 'true'`\n    };\n    console.log(systemMessage);\n    console.log(userMessage);\n    // Call the API for date and time extraction\n    let response = await _utils_openai__WEBPACK_IMPORTED_MODULE_0__.openai.chat.completions.create({\n        model: \"gpt-4-turbo-preview\",\n        messages: [\n            systemMessage,\n            userMessage\n        ],\n        response_format: {\n            type: \"json_object\"\n        }\n    });\n    console.log(response);\n    let timestamps = JSON.parse(response.choices[0].message.content);\n    console.log(timestamps);\n    let values = {};\n    console.log(typeof timestamps);\n    if (\"unknown\" in timestamps) {\n        values[\"timing\"] = false;\n    } else {\n        values[\"timing\"] = [\n            timestamps[\"start\"],\n            timestamps[\"end\"]\n        ];\n    }\n    // Create the system and user messages for search term extraction\n    systemMessage = {\n        role: \"system\",\n        content: \"You are a helpful assistant. When given a description of an event, your job is to extract the main topic of the event as a search term, disregarding any date or time-related details.\"\n    };\n    userMessage = {\n        role: \"user\",\n        content: `Given the following query: '${event}', what kind of event is the user looking for disregarding its date? Respond with JSON object with key 'search'.`\n    };\n    // Call the API for search term extraction\n    response = await _utils_openai__WEBPACK_IMPORTED_MODULE_0__.openai.chat.completions.create({\n        model: \"gpt-4-turbo-preview\",\n        messages: [\n            systemMessage,\n            userMessage\n        ],\n        response_format: {\n            type: \"json_object\"\n        }\n    });\n    let searchTerm = JSON.parse(response.choices[0].message.content);\n    values[\"search\"] = searchTerm[\"search\"];\n    // let searchTerm: EventStructure = response.data.choices[0].message.content as EventStructure;\n    // Combine both responses\n    return values;\n}\nasync function generateEmbedding(raw) {\n    // OpenAI recommends replacing newlines with spaces for best results\n    const input = raw.replace(/\\n/g, \" \");\n    const embeddingData = await _utils_openai__WEBPACK_IMPORTED_MODULE_0__.openai.embeddings.create({\n        model: \"text-embedding-3-large\",\n        input\n    });\n    const [{ embedding }] = embeddingData.data;\n    return embedding;\n}\nconst searchEvents = async (query, user_id, useOnboardingTable = false, builder, funlover, investor, page = 1, pageSize = 10)=>{\n    const similarityThreshold = .8;\n    const skip = (page - 1) * pageSize;\n    if (useOnboardingTable) {\n        const videos = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].onboarding.findMany({\n            skip: skip,\n            take: pageSize,\n            orderBy: {\n                location: \"asc\"\n            }\n        });\n        return videos;\n    } else {\n        let eventFilter = {};\n        if (user_id) {\n            // Fetch the user's embedding\n            console.log(\"FECHING\");\n            console.log(query);\n            console.log(user_id);\n            const goAhead = true;\n            if (goAhead) {\n                const userEmbedding = await generateEmbedding(query);\n                const vectorQuery = `[${userEmbedding.join(\",\")}]`;\n                const nonArchivedEventsWithSimilarity = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].$queryRaw`\n    SELECT\n        e.internalid,\n        e.title,\n\n        e.directionslink,\n\n        e.displaytitle,\n        e.displaydescription,\n        e.displaytitle,\n        e.location,\n        e.dropdowns,\n        e.eventlink,\n        e.timestampstart,\n        e.timestampend,\n        e.eventendtime,\n        e.eventstarttime,\n        e.lastupdated,\n        e.platform,\n\n\n        1 - (e.embedding <=> ${vectorQuery}::vector) as similarity\n    FROM events e\n    LEFT JOIN user_event_interactions uei ON e.internalid = uei.internalid AND uei.user_id = ${user_id} AND uei.interaction_type = 'archived'\n    WHERE (uei.internalid IS NULL OR uei.user_id IS NULL) \n      AND 1 - (e.embedding <=> ${vectorQuery}::vector) > .4\n    ORDER BY similarity DESC\n    LIMIT 8;\n`;\n                console.log(nonArchivedEventsWithSimilarity);\n                return nonArchivedEventsWithSimilarity;\n            } else {\n                console.log(\"NOT EMB Search\");\n                const archivedEvents = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].user_event_interactions.findMany({\n                    where: {\n                        user_id: user_id,\n                        interaction_type: \"archived\"\n                    },\n                    select: {\n                        internalid: true\n                    }\n                });\n                let archivedEventIds = archivedEvents.map((ae)=>ae.internalid);\n                eventFilter[\"NOT\"] = [\n                    {\n                        internalid: {\n                            in: archivedEventIds\n                        }\n                    }\n                ];\n            // Handle case where user does not have an embedding\n            // ... existing archived events code ...\n            }\n        }\n        // if (user_id) {\n        //     const archivedEvents = await prisma.user_event_interactions.findMany({\n        //         where: {\n        //             user_id: user_id,\n        //             interaction_type: 'archived',\n        //         },\n        //         select: {\n        //             internalid: true,\n        //         }\n        //     });\n        //     let archivedEventIds = archivedEvents.map(ae => ae.internalid);\n        //     eventFilter['NOT'] = [{ internalid: { in: archivedEventIds } }];\n        // }\n        if (investor === true) eventFilter[\"investor\"] = true;\n        if (builder === true) eventFilter[\"builder\"] = true;\n        if (funlover === true) eventFilter[\"fun\"] = true;\n        const events = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].events.findMany({\n            where: eventFilter,\n            skip: skip,\n            take: pageSize,\n            orderBy: {\n                lastupdated: \"desc\"\n            }\n        });\n        // const events = await prisma.events.findMany({\n        //     where: eventFilter,\n        //     skip: skip,\n        //     take: pageSize,\n        //     orderBy: {\n        //         lastupdated: 'desc',\n        //     },\n        // });\n        return events;\n    }\n};\nconst magicSearchEvents = async (query, initial, end, user_id, useOnboardingTable = false, builder, funlover, investor, page = 1, pageSize = 10)=>{\n    console.log(\"magic search event\");\n    const similarityThreshold = .8;\n    const skip = (page - 1) * pageSize;\n    if (useOnboardingTable) {\n        const videos = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].onboarding.findMany({\n            skip: skip,\n            take: pageSize,\n            orderBy: {\n                location: \"asc\"\n            }\n        });\n        return videos;\n    } else {\n        let eventFilter = {};\n        if (user_id) {\n            // Fetch the user's embedding\n            console.log(\"FECHING\");\n            console.log(query);\n            console.log(initial);\n            console.log(user_id);\n            const goAhead = true;\n            if (goAhead) {\n                const userEmbedding = await generateEmbedding(query);\n                const vectorQuery = `[${userEmbedding.join(\",\")}]`;\n                const nonArchivedEventsWithSimilarity = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].$queryRaw`\n    SELECT\n        e.internalid,\n        e.title,\n\n        e.directionslink,\n\n        e.displaytitle,\n        e.displaydescription,\n        e.displaytitle,\n        e.location,\n        e.dropdowns,\n        e.eventlink,\n        e.timestampstart,\n        e.timestampend,\n        e.eventendtime,\n        e.eventstarttime,\n        e.lastupdated,\n        e.platform,\n\n\n        1 - (e.embedding <=> ${vectorQuery}::vector) as similarity\n    FROM events e\n    LEFT JOIN user_event_interactions uei ON e.internalid = uei.internalid AND uei.user_id = ${user_id} AND uei.interaction_type = 'archived'\n    WHERE (uei.internalid IS NULL OR uei.user_id IS NULL) \n      AND 1 - (e.embedding <=> ${vectorQuery}::vector) > .4\n      AND (${initial} IS NULL OR e.timestampstart >= ${initial}::timestamp)\n      AND (${end} IS NULL OR e.timestampend <= ${end}::timestamp)\n    ORDER BY similarity DESC\n    LIMIT 8;\n`;\n                console.log(nonArchivedEventsWithSimilarity);\n                return nonArchivedEventsWithSimilarity;\n            } else {\n                console.log(\"NOT EMB Search\");\n                const archivedEvents = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].user_event_interactions.findMany({\n                    where: {\n                        user_id: user_id,\n                        interaction_type: \"archived\"\n                    },\n                    select: {\n                        internalid: true\n                    }\n                });\n                let archivedEventIds = archivedEvents.map((ae)=>ae.internalid);\n                eventFilter[\"NOT\"] = [\n                    {\n                        internalid: {\n                            in: archivedEventIds\n                        }\n                    }\n                ];\n            // Handle case where user does not have an embedding\n            // ... existing archived events code ...\n            }\n        }\n        // if (user_id) {\n        //     const archivedEvents = await prisma.user_event_interactions.findMany({\n        //         where: {\n        //             user_id: user_id,\n        //             interaction_type: 'archived',\n        //         },\n        //         select: {\n        //             internalid: true,\n        //         }\n        //     });\n        //     let archivedEventIds = archivedEvents.map(ae => ae.internalid);\n        //     eventFilter['NOT'] = [{ internalid: { in: archivedEventIds } }];\n        // }\n        if (investor === true) eventFilter[\"investor\"] = true;\n        if (builder === true) eventFilter[\"builder\"] = true;\n        if (funlover === true) eventFilter[\"fun\"] = true;\n        const events = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].events.findMany({\n            where: eventFilter,\n            skip: skip,\n            take: pageSize,\n            orderBy: {\n                lastupdated: \"desc\"\n            }\n        });\n        return events;\n    }\n};\nconst getAgenda = async (user_id, page = 1, pageSize = 10)=>{\n    const skip = (page - 1) * pageSize;\n    let eventFilter = {};\n    // Fetch non-archived event interactions for the user\n    const nonArchivedEvents = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].user_event_interactions.findMany({\n        where: {\n            user_id: user_id,\n            interaction_type: {\n                not: \"archived\"\n            }\n        },\n        select: {\n            internalid: true,\n            interaction_type: true\n        }\n    });\n    // Explicitly declare the type of interactionTypeMap\n    const interactionTypeMap = {};\n    nonArchivedEvents.forEach((eventInteraction)=>{\n        interactionTypeMap[eventInteraction.internalid] = eventInteraction.interaction_type;\n    });\n    // Fetch events based on the non-archived event IDs\n    let events = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].events.findMany({\n        where: {\n            ...eventFilter,\n            internalid: {\n                in: Object.keys(interactionTypeMap)\n            }\n        },\n        skip,\n        take: pageSize,\n        orderBy: {\n            lastupdated: \"desc\"\n        }\n    });\n    // Add interaction_type to each event\n    const eventsWithInteractionType = events.map((event)=>({\n            ...event,\n            interaction_type: interactionTypeMap[event.internalid] || undefined\n        }));\n    return eventsWithInteractionType;\n};\n// export const getAgenda = async (user_id: string, page = 1, pageSize = 10) => {\n//     const skip = (page - 1) * pageSize;\n//     let eventFilter: EventFilter = {};\n//     if (user_id) {\n//         const nonArchivedEvents = await prisma.user_event_interactions.findMany({\n//             where: {\n//                 user_id: user_id,\n//                 interaction_type: {\n//                     not: 'archived',\n//                 },\n//             },\n//             select: {\n//                 internalid: true,\n//             }\n//         });\n//         let nonArchivedEventIds = nonArchivedEvents.map(event => event.internalid);\n//         eventFilter['internalid'] = { in: nonArchivedEventIds };\n//     }\n//     const events = await prisma.events.findMany({\n//         where: eventFilter,\n//         skip: skip,\n//         take: pageSize,\n//         orderBy: {\n//             lastupdated: 'desc',\n//         },\n//     });\n//     console.log(events)\n//     return events;\n// };\nconst getEvents = async (user_id, useOnboardingTable = false, builder, funlover, investor, page = 1, pageSize = 10, embedding)=>{\n    const similarityThreshold = .8;\n    const skip = (page - 1) * pageSize;\n    if (useOnboardingTable) {\n        const videos = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].onboarding.findMany({\n            skip: skip,\n            take: pageSize,\n            orderBy: {\n                location: \"asc\"\n            }\n        });\n        return videos;\n    } else {\n        let eventFilter = {};\n        // let eventFilter = {};\n        if (user_id) {\n            console.log(\"FETCHING USER INTERACTIONS\");\n            const userInteractions = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].user_event_interactions.findMany({\n                where: {\n                    user_id\n                },\n                select: {\n                    internalid: true\n                }\n            });\n            let interactedEventIds = userInteractions.map((interaction)=>interaction.internalid);\n            if (interactedEventIds.length) {\n                eventFilter[\"NOT\"] = [\n                    {\n                        internalid: {\n                            in: interactedEventIds\n                        }\n                    }\n                ];\n            }\n        }\n        if (investor === true) eventFilter[\"investor\"] = true;\n        if (builder === true) eventFilter[\"builder\"] = true;\n        if (funlover === true) eventFilter[\"fun\"] = true;\n        if (embedding) {\n            const vectorQuery = `[${embedding.join(\",\")}]`;\n            const events = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].$queryRaw`\n            SELECT\n                e.internalid,\n                e.title,\n                e.directionslink,\n                e.displaytitle,\n                e.displaydescription,\n                e.location,\n                e.dropdowns,\n                e.eventlink,\n                e.timestampstart,\n                e.timestampend,\n                e.eventendtime,\n                e.eventstarttime,\n                e.lastupdated,\n                e.platform,\n                1 - (e.embedding <=> ${vectorQuery}::vector) as similarity\n            FROM events e\n            LEFT JOIN user_event_interactions uei ON e.internalid = uei.internalid AND uei.user_id = ${user_id} AND uei.interaction_type = 'archived'\n            WHERE (uei.internalid IS NULL OR uei.user_id IS NULL)\n              AND ${_prisma_client__WEBPACK_IMPORTED_MODULE_2__.Prisma.sql`1 - (e.embedding <=> ${vectorQuery}::vector) > .4`}\n              ${eventFilter[\"NOT\"] ? `AND e.internalid NOT IN (${_prisma_client__WEBPACK_IMPORTED_MODULE_2__.Prisma.join(eventFilter[\"NOT\"][0].internalid.in)})` : \"\"}\n              ${eventFilter[\"investor\"] ? \"AND e.investor = true\" : \"\"}\n              ${eventFilter[\"builder\"] ? \"AND e.builder = true\" : \"\"}\n              ${eventFilter[\"fun\"] ? \"AND e.fun = true\" : \"\"}    \n            ORDER BY similarity DESC\n            LIMIT ${pageSize}\n            OFFSET ${skip};\n        `;\n            return events;\n        } else {\n            const events = await _prisma_prismaClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"].events.findMany({\n                where: eventFilter,\n                skip: skip,\n                take: pageSize,\n                orderBy: {\n                    lastupdated: \"desc\"\n                }\n            });\n            return events;\n        }\n    }\n};\n// export const getEvents = async (user_id?: string, useOnboardingTable = false, builder?: boolean, funlover?: boolean, investor?: boolean) => {\n//     console.log(\"GETTING LOGS\");\n//     if (useOnboardingTable) {\n//         console.log(\"GETTING LOGS FROM ONBOARDING\");\n//         const videos = await prisma.onboarding.findMany({\n//             take: 10,\n//             orderBy: {\n//                 location: 'asc',\n//             },\n//         });\n//         return videos;\n//     } else {\n//         let eventFilter: EventFilter = {};\n//         if(user_id) { \n//             const archivedEvents = await prisma.user_event_interactions.findMany({\n//                 where: {\n//                     user_id: user_id,\n//                     interaction_type: 'archived',\n//                 },\n//                 select: {\n//                     internalid: true,\n//                 }\n//             });\n//             let archivedEventIds = archivedEvents.map(ae => ae.internalid);\n//             eventFilter['NOT'] = [{ internalid: { in: archivedEventIds } }];\n//         }\n//         if (investor === true) eventFilter['investor'] = true;\n//         if (builder === true) eventFilter['builder'] = true;\n//         if (funlover === true) eventFilter['fun'] = true;\n//         const events = await prisma.events.findMany({\n//             where: eventFilter,\n//             take: 10,\n//             orderBy: {\n//                 lastupdated: 'asc',\n//             },\n//         });\n//         return events;\n//     }\n// };\n//   export const getEvents = async (user_id?: string, useOnboardingTable = false, builder?: boolean, funlover?: boolean, investor?: boolean) => {\n//     console.log(\"GETTING LOGS\");\n//     if (useOnboardingTable) {\n//         console.log(\"GETTING LOGS FROM ONBOARDING\");\n//         const videos = await prisma.onboarding.findMany({\n//             take: 10,\n//             orderBy: {\n//                 location: 'asc', // Or any other preference\n//             },\n//         });\n//         return videos;\n//     } else {\n//         if(user_id) { // Only apply filtering if user_id is provided\n//             // Query to get list of archived event IDs for the user\n//             const archivedEvents = await prisma.user_event_interactions.findMany({\n//                 where: {\n//                     user_id: user_id,\n//                     interaction_type: 'archived',\n//                 },\n//                 select: {\n//                     internalid: true, // Selecting only the internal IDs of the archived events\n//                 }\n//             });\n//             let archivedEventIds = archivedEvents.map(ae => ae.internalid);\n//             // Now, query the events excluding the ones archived by the user\n//             const events = await prisma.events.findMany({\n//                 where: {\n//                     NOT: [\n//                         {\n//                             internalid: { in: archivedEventIds },\n//                         },\n//                     ],\n//                 },\n//                 take: 10,\n//                 orderBy: {\n//                     lastupdated: 'asc',\n//                 },\n//             });\n//             return events;\n//         } else { // If user_id is not provided, fetch all events without filtering\n//             return await prisma.events.findMany({\n//                 take: 10,\n//                 orderBy: {\n//                     lastupdated: 'asc',\n//                 },\n//             });\n//         }\n//     }\n// };\n// export const getEvents = async (useOnboardingTable = false, user_id: string) => {\n//     console.log(\"GETTING LOGS\");\n//     if (useOnboardingTable) {\n//         console.log(\"GETING LOGS \")\n//         const videos = await prisma.onboarding.findMany({\n//             take: 10,\n//             orderBy: {\n//                 location: 'asc', // or any other field you want to sort by\n//             },\n//         });\n//         return videos;\n//     }\n//     else {\n//         const videos = await prisma.events.findMany({\n//             take: 10,\n//             orderBy: {\n//                 lastupdated: 'asc', // or any other field you want to sort by\n//             },\n//         });\n//         return videos;\n//     }\n// };\nconst getDeploymentsByProjectIds = async (projectIds)=>{\n    console.log(\"GETTING DEPLOYMENTS FOR PROJECT IDs\");\n    // console.log(projectIds);\n    // const deployments = await prisma.deployments.findMany({\n    //     where: {\n    //         project_id: {\n    //             in: projectIds,\n    //         },\n    //     },\n    //     orderBy: {\n    //         deployment_id: 'asc', // or any other field you want to sort by\n    // //     },\n    // // });\n    // return deployments;\n    return null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./utils/getsend/models.ts\n");

/***/ }),

/***/ "(rsc)/./utils/openai.ts":
/*!*************************!*\
  !*** ./utils/openai.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY || \"\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi91dGlscy9vcGVuYWkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkI7QUFFcEIsTUFBTUMsU0FBUyxJQUFJRCw4Q0FBTUEsQ0FBQztJQUMvQkUsUUFBUUMsUUFBUUMsR0FBRyxDQUFDQyxjQUFjLElBQUk7QUFDeEMsR0FBRSIsInNvdXJjZXMiOlsid2VicGFjazovL25hbWUvLi91dGlscy9vcGVuYWkudHM/YWQ0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT3BlbkFJIGZyb20gJ29wZW5haSdcblxuZXhwb3J0IGNvbnN0IG9wZW5haSA9IG5ldyBPcGVuQUkoe1xuICBhcGlLZXk6IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZIHx8ICcnLFxufSlcblxuXG4iXSwibmFtZXMiOlsiT3BlbkFJIiwib3BlbmFpIiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIk9QRU5BSV9BUElfS0VZIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./utils/openai.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@clerk","vendor-chunks/node-fetch-native","vendor-chunks/@peculiar","vendor-chunks/asn1js","vendor-chunks/webcrypto-core","vendor-chunks/tslib","vendor-chunks/path-to-regexp","vendor-chunks/pvtsutils","vendor-chunks/pvutils","vendor-chunks/cookie","vendor-chunks/@swc","vendor-chunks/map-obj","vendor-chunks/no-case","vendor-chunks/lower-case","vendor-chunks/snake-case","vendor-chunks/dot-case","vendor-chunks/formdata-node","vendor-chunks/node-fetch","vendor-chunks/web-streams-polyfill","vendor-chunks/openai","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/abort-controller","vendor-chunks/ms","vendor-chunks/humanize-ms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdata%2Fevents%2Froute&page=%2Fapi%2Fdata%2Fevents%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdata%2Fevents%2Froute.ts&appDir=%2FUsers%2Fvicky%2FSpain%2FCandidly%2Fvotecandidly%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvicky%2FSpain%2FCandidly%2Fvotecandidly&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();