"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ai";
exports.ids = ["vendor-chunks/ai"];
exports.modules = {

/***/ "(ssr)/./node_modules/ai/react/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/ai/react/dist/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   experimental_useAssistant: () => (/* binding */ experimental_useAssistant),\n/* harmony export */   useAssistant: () => (/* binding */ useAssistant),\n/* harmony export */   useChat: () => (/* binding */ useChat),\n/* harmony export */   useCompletion: () => (/* binding */ useCompletion)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! swr */ \"(ssr)/./node_modules/swr/core/dist/index.mjs\");\n/* harmony import */ var nanoid_non_secure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! nanoid/non-secure */ \"(ssr)/./node_modules/nanoid/non-secure/index.js\");\n/* __next_internal_client_entry_do_not_use__ experimental_useAssistant,useAssistant,useChat,useCompletion auto */ // react/use-chat.ts\n\n\n// shared/stream-parts.ts\nvar textStreamPart = {\n    code: \"0\",\n    name: \"text\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"text\" parts expect a string value.');\n        }\n        return {\n            type: \"text\",\n            value\n        };\n    }\n};\nvar functionCallStreamPart = {\n    code: \"1\",\n    name: \"function_call\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"function_call\" in value) || typeof value.function_call !== \"object\" || value.function_call == null || !(\"name\" in value.function_call) || !(\"arguments\" in value.function_call) || typeof value.function_call.name !== \"string\" || typeof value.function_call.arguments !== \"string\") {\n            throw new Error('\"function_call\" parts expect an object with a \"function_call\" property.');\n        }\n        return {\n            type: \"function_call\",\n            value\n        };\n    }\n};\nvar dataStreamPart = {\n    code: \"2\",\n    name: \"data\",\n    parse: (value)=>{\n        if (!Array.isArray(value)) {\n            throw new Error('\"data\" parts expect an array value.');\n        }\n        return {\n            type: \"data\",\n            value\n        };\n    }\n};\nvar errorStreamPart = {\n    code: \"3\",\n    name: \"error\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"error\" parts expect a string value.');\n        }\n        return {\n            type: \"error\",\n            value\n        };\n    }\n};\nvar assistantMessageStreamPart = {\n    code: \"4\",\n    name: \"assistant_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"id\" in value) || !(\"role\" in value) || !(\"content\" in value) || typeof value.id !== \"string\" || typeof value.role !== \"string\" || value.role !== \"assistant\" || !Array.isArray(value.content) || !value.content.every((item)=>item != null && typeof item === \"object\" && \"type\" in item && item.type === \"text\" && \"text\" in item && item.text != null && typeof item.text === \"object\" && \"value\" in item.text && typeof item.text.value === \"string\")) {\n            throw new Error('\"assistant_message\" parts expect an object with an \"id\", \"role\", and \"content\" property.');\n        }\n        return {\n            type: \"assistant_message\",\n            value\n        };\n    }\n};\nvar assistantControlDataStreamPart = {\n    code: \"5\",\n    name: \"assistant_control_data\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"threadId\" in value) || !(\"messageId\" in value) || typeof value.threadId !== \"string\" || typeof value.messageId !== \"string\") {\n            throw new Error('\"assistant_control_data\" parts expect an object with a \"threadId\" and \"messageId\" property.');\n        }\n        return {\n            type: \"assistant_control_data\",\n            value: {\n                threadId: value.threadId,\n                messageId: value.messageId\n            }\n        };\n    }\n};\nvar dataMessageStreamPart = {\n    code: \"6\",\n    name: \"data_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"role\" in value) || !(\"data\" in value) || typeof value.role !== \"string\" || value.role !== \"data\") {\n            throw new Error('\"data_message\" parts expect an object with a \"role\" and \"data\" property.');\n        }\n        return {\n            type: \"data_message\",\n            value\n        };\n    }\n};\nvar toolCallStreamPart = {\n    code: \"7\",\n    name: \"tool_calls\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"tool_calls\" in value) || typeof value.tool_calls !== \"object\" || value.tool_calls == null || !Array.isArray(value.tool_calls) || value.tool_calls.some((tc)=>tc == null || typeof tc !== \"object\" || !(\"id\" in tc) || typeof tc.id !== \"string\" || !(\"type\" in tc) || typeof tc.type !== \"string\" || !(\"function\" in tc) || tc.function == null || typeof tc.function !== \"object\" || !(\"arguments\" in tc.function) || typeof tc.function.name !== \"string\" || typeof tc.function.arguments !== \"string\")) {\n            throw new Error('\"tool_calls\" parts expect an object with a ToolCallPayload.');\n        }\n        return {\n            type: \"tool_calls\",\n            value\n        };\n    }\n};\nvar messageAnnotationsStreamPart = {\n    code: \"8\",\n    name: \"message_annotations\",\n    parse: (value)=>{\n        if (!Array.isArray(value)) {\n            throw new Error('\"message_annotations\" parts expect an array value.');\n        }\n        return {\n            type: \"message_annotations\",\n            value\n        };\n    }\n};\nvar streamParts = [\n    textStreamPart,\n    functionCallStreamPart,\n    dataStreamPart,\n    errorStreamPart,\n    assistantMessageStreamPart,\n    assistantControlDataStreamPart,\n    dataMessageStreamPart,\n    toolCallStreamPart,\n    messageAnnotationsStreamPart\n];\nvar streamPartsByCode = {\n    [textStreamPart.code]: textStreamPart,\n    [functionCallStreamPart.code]: functionCallStreamPart,\n    [dataStreamPart.code]: dataStreamPart,\n    [errorStreamPart.code]: errorStreamPart,\n    [assistantMessageStreamPart.code]: assistantMessageStreamPart,\n    [assistantControlDataStreamPart.code]: assistantControlDataStreamPart,\n    [dataMessageStreamPart.code]: dataMessageStreamPart,\n    [toolCallStreamPart.code]: toolCallStreamPart,\n    [messageAnnotationsStreamPart.code]: messageAnnotationsStreamPart\n};\nvar StreamStringPrefixes = {\n    [textStreamPart.name]: textStreamPart.code,\n    [functionCallStreamPart.name]: functionCallStreamPart.code,\n    [dataStreamPart.name]: dataStreamPart.code,\n    [errorStreamPart.name]: errorStreamPart.code,\n    [assistantMessageStreamPart.name]: assistantMessageStreamPart.code,\n    [assistantControlDataStreamPart.name]: assistantControlDataStreamPart.code,\n    [dataMessageStreamPart.name]: dataMessageStreamPart.code,\n    [toolCallStreamPart.name]: toolCallStreamPart.code,\n    [messageAnnotationsStreamPart.name]: messageAnnotationsStreamPart.code\n};\nvar validCodes = streamParts.map((part)=>part.code);\nvar parseStreamPart = (line)=>{\n    const firstSeparatorIndex = line.indexOf(\":\");\n    if (firstSeparatorIndex === -1) {\n        throw new Error(\"Failed to parse stream string. No separator found.\");\n    }\n    const prefix = line.slice(0, firstSeparatorIndex);\n    if (!validCodes.includes(prefix)) {\n        throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);\n    }\n    const code = prefix;\n    const textValue = line.slice(firstSeparatorIndex + 1);\n    const jsonValue = JSON.parse(textValue);\n    return streamPartsByCode[code].parse(jsonValue);\n};\n// shared/read-data-stream.ts\nvar NEWLINE = \"\\n\".charCodeAt(0);\nfunction concatChunks(chunks, totalLength) {\n    const concatenatedChunks = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const chunk of chunks){\n        concatenatedChunks.set(chunk, offset);\n        offset += chunk.length;\n    }\n    chunks.length = 0;\n    return concatenatedChunks;\n}\nasync function* readDataStream(reader, { isAborted } = {}) {\n    const decoder = new TextDecoder();\n    const chunks = [];\n    let totalLength = 0;\n    while(true){\n        const { value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            totalLength += value.length;\n            if (value[value.length - 1] !== NEWLINE) {\n                continue;\n            }\n        }\n        if (chunks.length === 0) {\n            break;\n        }\n        const concatenatedChunks = concatChunks(chunks, totalLength);\n        totalLength = 0;\n        const streamParts2 = decoder.decode(concatenatedChunks, {\n            stream: true\n        }).split(\"\\n\").filter((line)=>line !== \"\").map(parseStreamPart);\n        for (const streamPart of streamParts2){\n            yield streamPart;\n        }\n        if (isAborted == null ? void 0 : isAborted()) {\n            reader.cancel();\n            break;\n        }\n    }\n}\n// shared/generate-id.ts\n\nvar generateId = (0,nanoid_non_secure__WEBPACK_IMPORTED_MODULE_2__.customAlphabet)(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", 7);\n// shared/parse-complex-response.ts\nfunction assignAnnotationsToMessage(message, annotations) {\n    if (!message || !annotations || !annotations.length) return message;\n    return {\n        ...message,\n        annotations: [\n            ...annotations\n        ]\n    };\n}\nasync function parseComplexResponse({ reader, abortControllerRef, update, onFinish, generateId: generateId2 = generateId, getCurrentDate = ()=>/* @__PURE__ */ new Date() }) {\n    const createdAt = getCurrentDate();\n    const prefixMap = {\n        data: []\n    };\n    let message_annotations = void 0;\n    for await (const { type, value } of readDataStream(reader, {\n        isAborted: ()=>(abortControllerRef == null ? void 0 : abortControllerRef.current) === null\n    })){\n        if (type === \"text\") {\n            if (prefixMap[\"text\"]) {\n                prefixMap[\"text\"] = {\n                    ...prefixMap[\"text\"],\n                    content: (prefixMap[\"text\"].content || \"\") + value\n                };\n            } else {\n                prefixMap[\"text\"] = {\n                    id: generateId2(),\n                    role: \"assistant\",\n                    content: value,\n                    createdAt\n                };\n            }\n        }\n        let functionCallMessage = null;\n        if (type === \"function_call\") {\n            prefixMap[\"function_call\"] = {\n                id: generateId2(),\n                role: \"assistant\",\n                content: \"\",\n                function_call: value.function_call,\n                name: value.function_call.name,\n                createdAt\n            };\n            functionCallMessage = prefixMap[\"function_call\"];\n        }\n        let toolCallMessage = null;\n        if (type === \"tool_calls\") {\n            prefixMap[\"tool_calls\"] = {\n                id: generateId2(),\n                role: \"assistant\",\n                content: \"\",\n                tool_calls: value.tool_calls,\n                createdAt\n            };\n            toolCallMessage = prefixMap[\"tool_calls\"];\n        }\n        if (type === \"data\") {\n            prefixMap[\"data\"].push(...value);\n        }\n        let responseMessage = prefixMap[\"text\"];\n        if (type === \"message_annotations\") {\n            if (!message_annotations) {\n                message_annotations = [\n                    ...value\n                ];\n            } else {\n                message_annotations.push(...value);\n            }\n            functionCallMessage = assignAnnotationsToMessage(prefixMap[\"function_call\"], message_annotations);\n            toolCallMessage = assignAnnotationsToMessage(prefixMap[\"tool_calls\"], message_annotations);\n            responseMessage = assignAnnotationsToMessage(prefixMap[\"text\"], message_annotations);\n        }\n        if (message_annotations == null ? void 0 : message_annotations.length) {\n            const messagePrefixKeys = [\n                \"text\",\n                \"function_call\",\n                \"tool_calls\"\n            ];\n            messagePrefixKeys.forEach((key)=>{\n                if (prefixMap[key]) {\n                    prefixMap[key].annotations = [\n                        ...message_annotations\n                    ];\n                }\n            });\n        }\n        const merged = [\n            functionCallMessage,\n            toolCallMessage,\n            responseMessage\n        ].filter(Boolean).map((message)=>({\n                ...assignAnnotationsToMessage(message, message_annotations)\n            }));\n        update(merged, [\n            ...prefixMap[\"data\"]\n        ]);\n    }\n    onFinish == null ? void 0 : onFinish(prefixMap);\n    return {\n        messages: [\n            prefixMap.text,\n            prefixMap.function_call,\n            prefixMap.tool_calls\n        ].filter(Boolean),\n        data: prefixMap.data\n    };\n}\n// shared/call-chat-api.ts\nasync function callChatApi({ api, messages, body, credentials, headers, abortController, restoreMessagesOnFailure, onResponse, onUpdate, onFinish, generateId: generateId2 }) {\n    var _a;\n    const response = await fetch(api, {\n        method: \"POST\",\n        body: JSON.stringify({\n            messages,\n            ...body\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...headers\n        },\n        signal: (_a = abortController == null ? void 0 : abortController()) == null ? void 0 : _a.signal,\n        credentials\n    }).catch((err)=>{\n        restoreMessagesOnFailure();\n        throw err;\n    });\n    if (onResponse) {\n        try {\n            await onResponse(response);\n        } catch (err) {\n            throw err;\n        }\n    }\n    if (!response.ok) {\n        restoreMessagesOnFailure();\n        throw new Error(await response.text() || \"Failed to fetch the chat response.\");\n    }\n    if (!response.body) {\n        throw new Error(\"The response body is empty.\");\n    }\n    const reader = response.body.getReader();\n    return await parseComplexResponse({\n        reader,\n        abortControllerRef: abortController != null ? {\n            current: abortController()\n        } : void 0,\n        update: onUpdate,\n        onFinish (prefixMap) {\n            if (onFinish && prefixMap.text != null) {\n                onFinish(prefixMap.text);\n            }\n        },\n        generateId: generateId2\n    });\n}\n// shared/process-chat-stream.ts\nasync function processChatStream({ getStreamedResponse: getStreamedResponse2, experimental_onFunctionCall, experimental_onToolCall, updateChatRequest, getCurrentMessages }) {\n    while(true){\n        const messagesAndDataOrJustMessage = await getStreamedResponse2();\n        if (\"messages\" in messagesAndDataOrJustMessage) {\n            let hasFollowingResponse = false;\n            for (const message of messagesAndDataOrJustMessage.messages){\n                if ((message.function_call === void 0 || typeof message.function_call === \"string\") && (message.tool_calls === void 0 || typeof message.tool_calls === \"string\")) {\n                    continue;\n                }\n                hasFollowingResponse = true;\n                if (experimental_onFunctionCall) {\n                    const functionCall = message.function_call;\n                    if (typeof functionCall !== \"object\") {\n                        console.warn(\"experimental_onFunctionCall should not be defined when using tools\");\n                        continue;\n                    }\n                    const functionCallResponse = await experimental_onFunctionCall(getCurrentMessages(), functionCall);\n                    if (functionCallResponse === void 0) {\n                        hasFollowingResponse = false;\n                        break;\n                    }\n                    updateChatRequest(functionCallResponse);\n                }\n                if (experimental_onToolCall) {\n                    const toolCalls = message.tool_calls;\n                    if (!Array.isArray(toolCalls) || toolCalls.some((toolCall)=>typeof toolCall !== \"object\")) {\n                        console.warn(\"experimental_onToolCall should not be defined when using tools\");\n                        continue;\n                    }\n                    const toolCallResponse = await experimental_onToolCall(getCurrentMessages(), toolCalls);\n                    if (toolCallResponse === void 0) {\n                        hasFollowingResponse = false;\n                        break;\n                    }\n                    updateChatRequest(toolCallResponse);\n                }\n            }\n            if (!hasFollowingResponse) {\n                break;\n            }\n        } else {\n            let fixFunctionCallArguments2 = function(response) {\n                for (const message of response.messages){\n                    if (message.tool_calls !== void 0) {\n                        for (const toolCall of message.tool_calls){\n                            if (typeof toolCall === \"object\") {\n                                if (toolCall.function.arguments && typeof toolCall.function.arguments !== \"string\") {\n                                    toolCall.function.arguments = JSON.stringify(toolCall.function.arguments);\n                                }\n                            }\n                        }\n                    }\n                    if (message.function_call !== void 0) {\n                        if (typeof message.function_call === \"object\") {\n                            if (message.function_call.arguments && typeof message.function_call.arguments !== \"string\") {\n                                message.function_call.arguments = JSON.stringify(message.function_call.arguments);\n                            }\n                        }\n                    }\n                }\n            };\n            var fixFunctionCallArguments = fixFunctionCallArguments2;\n            const streamedResponseMessage = messagesAndDataOrJustMessage;\n            if ((streamedResponseMessage.function_call === void 0 || typeof streamedResponseMessage.function_call === \"string\") && (streamedResponseMessage.tool_calls === void 0 || typeof streamedResponseMessage.tool_calls === \"string\")) {\n                break;\n            }\n            if (experimental_onFunctionCall) {\n                const functionCall = streamedResponseMessage.function_call;\n                if (!(typeof functionCall === \"object\")) {\n                    console.warn(\"experimental_onFunctionCall should not be defined when using tools\");\n                    continue;\n                }\n                const functionCallResponse = await experimental_onFunctionCall(getCurrentMessages(), functionCall);\n                if (functionCallResponse === void 0) break;\n                fixFunctionCallArguments2(functionCallResponse);\n                updateChatRequest(functionCallResponse);\n            }\n            if (experimental_onToolCall) {\n                const toolCalls = streamedResponseMessage.tool_calls;\n                if (!(typeof toolCalls === \"object\")) {\n                    console.warn(\"experimental_onToolCall should not be defined when using functions\");\n                    continue;\n                }\n                const toolCallResponse = await experimental_onToolCall(getCurrentMessages(), toolCalls);\n                if (toolCallResponse === void 0) break;\n                fixFunctionCallArguments2(toolCallResponse);\n                updateChatRequest(toolCallResponse);\n            }\n        }\n    }\n}\n// react/use-chat.ts\nvar getStreamedResponse = async (api, chatRequest, mutate, mutateStreamData, existingData, extraMetadataRef, messagesRef, abortControllerRef, generateId2, onFinish, onResponse, sendExtraMessageFields)=>{\n    var _a, _b;\n    const previousMessages = messagesRef.current;\n    mutate(chatRequest.messages, false);\n    const constructedMessagesPayload = sendExtraMessageFields ? chatRequest.messages : chatRequest.messages.map(({ role, content, name, function_call, tool_calls, tool_call_id })=>({\n            role,\n            content,\n            tool_call_id,\n            ...name !== void 0 && {\n                name\n            },\n            ...function_call !== void 0 && {\n                function_call\n            },\n            ...tool_calls !== void 0 && {\n                tool_calls\n            }\n        }));\n    if (typeof api !== \"string\") {\n        const replyId = generateId2();\n        const createdAt = /* @__PURE__ */ new Date();\n        let responseMessage = {\n            id: replyId,\n            createdAt,\n            content: \"\",\n            role: \"assistant\"\n        };\n        async function readRow(promise) {\n            const { content, ui, next } = await promise;\n            responseMessage[\"content\"] = content;\n            responseMessage[\"ui\"] = await ui;\n            mutate([\n                ...chatRequest.messages,\n                {\n                    ...responseMessage\n                }\n            ], false);\n            if (next) {\n                await readRow(next);\n            }\n        }\n        try {\n            const promise = api({\n                messages: constructedMessagesPayload,\n                data: chatRequest.data\n            });\n            await readRow(promise);\n        } catch (e) {\n            mutate(previousMessages, false);\n            throw e;\n        }\n        if (onFinish) {\n            onFinish(responseMessage);\n        }\n        return responseMessage;\n    }\n    return await callChatApi({\n        api,\n        messages: constructedMessagesPayload,\n        body: {\n            data: chatRequest.data,\n            ...extraMetadataRef.current.body,\n            ...(_a = chatRequest.options) == null ? void 0 : _a.body,\n            ...chatRequest.functions !== void 0 && {\n                functions: chatRequest.functions\n            },\n            ...chatRequest.function_call !== void 0 && {\n                function_call: chatRequest.function_call\n            },\n            ...chatRequest.tools !== void 0 && {\n                tools: chatRequest.tools\n            },\n            ...chatRequest.tool_choice !== void 0 && {\n                tool_choice: chatRequest.tool_choice\n            }\n        },\n        credentials: extraMetadataRef.current.credentials,\n        headers: {\n            ...extraMetadataRef.current.headers,\n            ...(_b = chatRequest.options) == null ? void 0 : _b.headers\n        },\n        abortController: ()=>abortControllerRef.current,\n        restoreMessagesOnFailure () {\n            mutate(previousMessages, false);\n        },\n        onResponse,\n        onUpdate (merged, data) {\n            mutate([\n                ...chatRequest.messages,\n                ...merged\n            ], false);\n            mutateStreamData([\n                ...existingData || [],\n                ...data || []\n            ], false);\n        },\n        onFinish,\n        generateId: generateId2\n    });\n};\nfunction useChat({ api = \"/api/chat\", id, initialMessages, initialInput = \"\", sendExtraMessageFields, experimental_onFunctionCall, experimental_onToolCall, onResponse, onFinish, onError, credentials, headers, body, generateId: generateId2 = generateId } = {}) {\n    const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const idKey = id != null ? id : hookId;\n    const chatKey = typeof api === \"string\" ? [\n        api,\n        idKey\n    ] : idKey;\n    const [initialMessagesFallback] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const { data: messages, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"messages\"\n    ], null, {\n        fallbackData: initialMessages != null ? initialMessages : initialMessagesFallback\n    });\n    const { data: isLoading = false, mutate: mutateLoading } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"loading\"\n    ], null);\n    const { data: streamData, mutate: mutateStreamData } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"streamData\"\n    ], null);\n    const { data: error = void 0, mutate: setError } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"error\"\n    ], null);\n    const messagesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(messages || []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        messagesRef.current = messages || [];\n    }, [\n        messages\n    ]);\n    const abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const extraMetadataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        credentials,\n        headers,\n        body\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        extraMetadataRef.current = {\n            credentials,\n            headers,\n            body\n        };\n    }, [\n        credentials,\n        headers,\n        body\n    ]);\n    const triggerRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (chatRequest)=>{\n        try {\n            mutateLoading(true);\n            setError(void 0);\n            const abortController = new AbortController();\n            abortControllerRef.current = abortController;\n            await processChatStream({\n                getStreamedResponse: ()=>getStreamedResponse(api, chatRequest, mutate, mutateStreamData, streamData, extraMetadataRef, messagesRef, abortControllerRef, generateId2, onFinish, onResponse, sendExtraMessageFields),\n                experimental_onFunctionCall,\n                experimental_onToolCall,\n                updateChatRequest: (chatRequestParam)=>{\n                    chatRequest = chatRequestParam;\n                },\n                getCurrentMessages: ()=>messagesRef.current\n            });\n            abortControllerRef.current = null;\n        } catch (err) {\n            if (err.name === \"AbortError\") {\n                abortControllerRef.current = null;\n                return null;\n            }\n            if (onError && err instanceof Error) {\n                onError(err);\n            }\n            setError(err);\n        } finally{\n            mutateLoading(false);\n        }\n    }, [\n        mutate,\n        mutateLoading,\n        api,\n        extraMetadataRef,\n        onResponse,\n        onFinish,\n        onError,\n        setError,\n        mutateStreamData,\n        streamData,\n        sendExtraMessageFields,\n        experimental_onFunctionCall,\n        experimental_onToolCall,\n        messagesRef,\n        abortControllerRef,\n        generateId2\n    ]);\n    const append = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (message, { options, functions, function_call, tools, tool_choice, data } = {})=>{\n        if (!message.id) {\n            message.id = generateId2();\n        }\n        const chatRequest = {\n            messages: messagesRef.current.concat(message),\n            options,\n            data,\n            ...functions !== void 0 && {\n                functions\n            },\n            ...function_call !== void 0 && {\n                function_call\n            },\n            ...tools !== void 0 && {\n                tools\n            },\n            ...tool_choice !== void 0 && {\n                tool_choice\n            }\n        };\n        return triggerRequest(chatRequest);\n    }, [\n        triggerRequest,\n        generateId2\n    ]);\n    const reload = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ options, functions, function_call, tools, tool_choice } = {})=>{\n        if (messagesRef.current.length === 0) return null;\n        const lastMessage = messagesRef.current[messagesRef.current.length - 1];\n        if (lastMessage.role === \"assistant\") {\n            const chatRequest2 = {\n                messages: messagesRef.current.slice(0, -1),\n                options,\n                ...functions !== void 0 && {\n                    functions\n                },\n                ...function_call !== void 0 && {\n                    function_call\n                },\n                ...tools !== void 0 && {\n                    tools\n                },\n                ...tool_choice !== void 0 && {\n                    tool_choice\n                }\n            };\n            return triggerRequest(chatRequest2);\n        }\n        const chatRequest = {\n            messages: messagesRef.current,\n            options,\n            ...functions !== void 0 && {\n                functions\n            },\n            ...function_call !== void 0 && {\n                function_call\n            },\n            ...tools !== void 0 && {\n                tools\n            },\n            ...tool_choice !== void 0 && {\n                tool_choice\n            }\n        };\n        return triggerRequest(chatRequest);\n    }, [\n        triggerRequest\n    ]);\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (abortControllerRef.current) {\n            abortControllerRef.current.abort();\n            abortControllerRef.current = null;\n        }\n    }, []);\n    const setMessages = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((messages2)=>{\n        mutate(messages2, false);\n        messagesRef.current = messages2;\n    }, [\n        mutate\n    ]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialInput);\n    const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e, options = {}, metadata)=>{\n        if (metadata) {\n            extraMetadataRef.current = {\n                ...extraMetadataRef.current,\n                ...metadata\n            };\n        }\n        e.preventDefault();\n        if (!input) return;\n        append({\n            content: input,\n            role: \"user\",\n            createdAt: /* @__PURE__ */ new Date()\n        }, options);\n        setInput(\"\");\n    }, [\n        input,\n        append\n    ]);\n    const handleInputChange = (e)=>{\n        setInput(e.target.value);\n    };\n    return {\n        messages: messages || [],\n        error,\n        append,\n        reload,\n        stop,\n        setMessages,\n        input,\n        setInput,\n        handleInputChange,\n        handleSubmit,\n        isLoading,\n        data: streamData\n    };\n}\n// react/use-completion.ts\n\n\n// shared/call-completion-api.ts\nasync function callCompletionApi({ api, prompt, credentials, headers, body, setCompletion, setLoading, setError, setAbortController, onResponse, onFinish, onError, onData }) {\n    try {\n        setLoading(true);\n        setError(void 0);\n        const abortController = new AbortController();\n        setAbortController(abortController);\n        setCompletion(\"\");\n        const res = await fetch(api, {\n            method: \"POST\",\n            body: JSON.stringify({\n                prompt,\n                ...body\n            }),\n            credentials,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...headers\n            },\n            signal: abortController.signal\n        }).catch((err)=>{\n            throw err;\n        });\n        if (onResponse) {\n            try {\n                await onResponse(res);\n            } catch (err) {\n                throw err;\n            }\n        }\n        if (!res.ok) {\n            throw new Error(await res.text() || \"Failed to fetch the chat response.\");\n        }\n        if (!res.body) {\n            throw new Error(\"The response body is empty.\");\n        }\n        let result = \"\";\n        const reader = res.body.getReader();\n        for await (const { type, value } of readDataStream(reader, {\n            isAborted: ()=>abortController === null\n        })){\n            switch(type){\n                case \"text\":\n                    {\n                        result += value;\n                        setCompletion(result);\n                        break;\n                    }\n                case \"data\":\n                    {\n                        onData == null ? void 0 : onData(value);\n                        break;\n                    }\n            }\n        }\n        if (onFinish) {\n            onFinish(prompt, result);\n        }\n        setAbortController(null);\n        return result;\n    } catch (err) {\n        if (err.name === \"AbortError\") {\n            setAbortController(null);\n            return null;\n        }\n        if (err instanceof Error) {\n            if (onError) {\n                onError(err);\n            }\n        }\n        setError(err);\n    } finally{\n        setLoading(false);\n    }\n}\n// react/use-completion.ts\nfunction useCompletion({ api = \"/api/completion\", id, initialCompletion = \"\", initialInput = \"\", credentials, headers, body, onResponse, onFinish, onError } = {}) {\n    const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const completionId = id || hookId;\n    const { data, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        api,\n        completionId\n    ], null, {\n        fallbackData: initialCompletion\n    });\n    const { data: isLoading = false, mutate: mutateLoading } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        completionId,\n        \"loading\"\n    ], null);\n    const { data: streamData, mutate: mutateStreamData } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        completionId,\n        \"streamData\"\n    ], null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    const completion = data;\n    const [abortController, setAbortController] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const extraMetadataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        credentials,\n        headers,\n        body\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        extraMetadataRef.current = {\n            credentials,\n            headers,\n            body\n        };\n    }, [\n        credentials,\n        headers,\n        body\n    ]);\n    const triggerRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (prompt, options)=>callCompletionApi({\n            api,\n            prompt,\n            credentials: extraMetadataRef.current.credentials,\n            headers: {\n                ...extraMetadataRef.current.headers,\n                ...options == null ? void 0 : options.headers\n            },\n            body: {\n                ...extraMetadataRef.current.body,\n                ...options == null ? void 0 : options.body\n            },\n            setCompletion: (completion2)=>mutate(completion2, false),\n            setLoading: mutateLoading,\n            setError,\n            setAbortController,\n            onResponse,\n            onFinish,\n            onError,\n            onData: (data2)=>{\n                mutateStreamData([\n                    ...streamData || [],\n                    ...data2 || []\n                ], false);\n            }\n        }), [\n        mutate,\n        mutateLoading,\n        api,\n        extraMetadataRef,\n        setAbortController,\n        onResponse,\n        onFinish,\n        onError,\n        setError,\n        streamData,\n        mutateStreamData\n    ]);\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (abortController) {\n            abortController.abort();\n            setAbortController(null);\n        }\n    }, [\n        abortController\n    ]);\n    const setCompletion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((completion2)=>{\n        mutate(completion2, false);\n    }, [\n        mutate\n    ]);\n    const complete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (prompt, options)=>{\n        return triggerRequest(prompt, options);\n    }, [\n        triggerRequest\n    ]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialInput);\n    const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        e.preventDefault();\n        if (!input) return;\n        return complete(input);\n    }, [\n        input,\n        complete\n    ]);\n    const handleInputChange = (e)=>{\n        setInput(e.target.value);\n    };\n    return {\n        completion,\n        complete,\n        error,\n        setCompletion,\n        stop,\n        input,\n        setInput,\n        handleInputChange,\n        handleSubmit,\n        isLoading,\n        data: streamData\n    };\n}\n// react/use-assistant.ts\n\nfunction useAssistant({ api, threadId: threadIdParam, credentials, headers, body, onError }) {\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [threadId, setThreadId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"awaiting_message\");\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    const handleInputChange = (event)=>{\n        setInput(event.target.value);\n    };\n    const submitMessage = async (event, requestOptions)=>{\n        var _a, _b;\n        (_a = event == null ? void 0 : event.preventDefault) == null ? void 0 : _a.call(event);\n        if (input === \"\") {\n            return;\n        }\n        setStatus(\"in_progress\");\n        setMessages((messages2)=>[\n                ...messages2,\n                {\n                    id: \"\",\n                    role: \"user\",\n                    content: input\n                }\n            ]);\n        setInput(\"\");\n        const result = await fetch(api, {\n            method: \"POST\",\n            credentials,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...headers\n            },\n            body: JSON.stringify({\n                ...body,\n                // always use user-provided threadId when available:\n                threadId: (_b = threadIdParam != null ? threadIdParam : threadId) != null ? _b : null,\n                message: input,\n                // optional request data:\n                data: requestOptions == null ? void 0 : requestOptions.data\n            })\n        });\n        if (result.body == null) {\n            throw new Error(\"The response body is empty.\");\n        }\n        try {\n            for await (const { type, value } of readDataStream(result.body.getReader())){\n                switch(type){\n                    case \"assistant_message\":\n                        {\n                            setMessages((messages2)=>[\n                                    ...messages2,\n                                    {\n                                        id: value.id,\n                                        role: value.role,\n                                        content: value.content[0].text.value\n                                    }\n                                ]);\n                            break;\n                        }\n                    case \"text\":\n                        {\n                            setMessages((messages2)=>{\n                                const lastMessage = messages2[messages2.length - 1];\n                                return [\n                                    ...messages2.slice(0, messages2.length - 1),\n                                    {\n                                        id: lastMessage.id,\n                                        role: lastMessage.role,\n                                        content: lastMessage.content + value\n                                    }\n                                ];\n                            });\n                            break;\n                        }\n                    case \"data_message\":\n                        {\n                            setMessages((messages2)=>{\n                                var _a2;\n                                return [\n                                    ...messages2,\n                                    {\n                                        id: (_a2 = value.id) != null ? _a2 : generateId(),\n                                        role: \"data\",\n                                        content: \"\",\n                                        data: value.data\n                                    }\n                                ];\n                            });\n                            break;\n                        }\n                    case \"assistant_control_data\":\n                        {\n                            setThreadId(value.threadId);\n                            setMessages((messages2)=>{\n                                const lastMessage = messages2[messages2.length - 1];\n                                lastMessage.id = value.messageId;\n                                return [\n                                    ...messages2.slice(0, messages2.length - 1),\n                                    lastMessage\n                                ];\n                            });\n                            break;\n                        }\n                    case \"error\":\n                        {\n                            const errorObj = new Error(value);\n                            setError(errorObj);\n                            break;\n                        }\n                }\n            }\n        } catch (error2) {\n            if (onError && error2 instanceof Error) {\n                onError(error2);\n            }\n            setError(error2);\n        }\n        setStatus(\"awaiting_message\");\n    };\n    return {\n        messages,\n        setMessages,\n        threadId,\n        input,\n        setInput,\n        handleInputChange,\n        submitMessage,\n        status,\n        error\n    };\n}\nvar experimental_useAssistant = useAssistant;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWkvcmVhY3QvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztrSEFFQSxvQkFBb0I7QUFDb0Q7QUFDL0M7QUFFekIseUJBQXlCO0FBQ3pCLElBQUlNLGlCQUFpQjtJQUNuQkMsTUFBTTtJQUNOQyxNQUFNO0lBQ05DLE9BQU8sQ0FBQ0M7UUFDTixJQUFJLE9BQU9BLFVBQVUsVUFBVTtZQUM3QixNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFDQSxPQUFPO1lBQUVDLE1BQU07WUFBUUY7UUFBTTtJQUMvQjtBQUNGO0FBQ0EsSUFBSUcseUJBQXlCO0lBQzNCTixNQUFNO0lBQ05DLE1BQU07SUFDTkMsT0FBTyxDQUFDQztRQUNOLElBQUlBLFNBQVMsUUFBUSxPQUFPQSxVQUFVLFlBQVksQ0FBRSxvQkFBbUJBLEtBQUksS0FBTSxPQUFPQSxNQUFNSSxhQUFhLEtBQUssWUFBWUosTUFBTUksYUFBYSxJQUFJLFFBQVEsQ0FBRSxXQUFVSixNQUFNSSxhQUFhLEtBQUssQ0FBRSxnQkFBZUosTUFBTUksYUFBYSxLQUFLLE9BQU9KLE1BQU1JLGFBQWEsQ0FBQ04sSUFBSSxLQUFLLFlBQVksT0FBT0UsTUFBTUksYUFBYSxDQUFDQyxTQUFTLEtBQUssVUFBVTtZQUN6VSxNQUFNLElBQUlKLE1BQ1I7UUFFSjtRQUNBLE9BQU87WUFDTEMsTUFBTTtZQUNORjtRQUNGO0lBQ0Y7QUFDRjtBQUNBLElBQUlNLGlCQUFpQjtJQUNuQlQsTUFBTTtJQUNOQyxNQUFNO0lBQ05DLE9BQU8sQ0FBQ0M7UUFDTixJQUFJLENBQUNPLE1BQU1DLE9BQU8sQ0FBQ1IsUUFBUTtZQUN6QixNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFDQSxPQUFPO1lBQUVDLE1BQU07WUFBUUY7UUFBTTtJQUMvQjtBQUNGO0FBQ0EsSUFBSVMsa0JBQWtCO0lBQ3BCWixNQUFNO0lBQ05DLE1BQU07SUFDTkMsT0FBTyxDQUFDQztRQUNOLElBQUksT0FBT0EsVUFBVSxVQUFV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Q0Y7UUFDRixFQUFFLE9BQU9DLFFBQVE7WUFDZixJQUFJL0QsV0FBVytELGtCQUFrQjFOLE9BQU87Z0JBQ3RDMkosUUFBUStEO1lBQ1Y7WUFDQXJELFNBQVNxRDtRQUNYO1FBQ0FQLFVBQVU7SUFDWjtJQUNBLE9BQU87UUFDTHZIO1FBQ0FvRjtRQUNBL0o7UUFDQWlLO1FBQ0FDO1FBQ0FJO1FBQ0E4QjtRQUNBSDtRQUNBOUM7SUFDRjtBQUNGO0FBQ0EsSUFBSXVELDRCQUE0Qlo7QUFNOUIsQ0FDRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uYW1lLy4vbm9kZV9tb2R1bGVzL2FpL3JlYWN0L2Rpc3QvaW5kZXgubWpzPzJiZmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbi8vIHJlYWN0L3VzZS1jaGF0LnRzXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VJZCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHVzZVNXUiBmcm9tIFwic3dyXCI7XG5cbi8vIHNoYXJlZC9zdHJlYW0tcGFydHMudHNcbnZhciB0ZXh0U3RyZWFtUGFydCA9IHtcbiAgY29kZTogXCIwXCIsXG4gIG5hbWU6IFwidGV4dFwiLFxuICBwYXJzZTogKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcInRleHRcIiBwYXJ0cyBleHBlY3QgYSBzdHJpbmcgdmFsdWUuJyk7XG4gICAgfVxuICAgIHJldHVybiB7IHR5cGU6IFwidGV4dFwiLCB2YWx1ZSB9O1xuICB9XG59O1xudmFyIGZ1bmN0aW9uQ2FsbFN0cmVhbVBhcnQgPSB7XG4gIGNvZGU6IFwiMVwiLFxuICBuYW1lOiBcImZ1bmN0aW9uX2NhbGxcIixcbiAgcGFyc2U6ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCAhKFwiZnVuY3Rpb25fY2FsbFwiIGluIHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUuZnVuY3Rpb25fY2FsbCAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZS5mdW5jdGlvbl9jYWxsID09IG51bGwgfHwgIShcIm5hbWVcIiBpbiB2YWx1ZS5mdW5jdGlvbl9jYWxsKSB8fCAhKFwiYXJndW1lbnRzXCIgaW4gdmFsdWUuZnVuY3Rpb25fY2FsbCkgfHwgdHlwZW9mIHZhbHVlLmZ1bmN0aW9uX2NhbGwubmFtZSAhPT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsdWUuZnVuY3Rpb25fY2FsbC5hcmd1bWVudHMgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1wiZnVuY3Rpb25fY2FsbFwiIHBhcnRzIGV4cGVjdCBhbiBvYmplY3Qgd2l0aCBhIFwiZnVuY3Rpb25fY2FsbFwiIHByb3BlcnR5LidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImZ1bmN0aW9uX2NhbGxcIixcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfVxufTtcbnZhciBkYXRhU3RyZWFtUGFydCA9IHtcbiAgY29kZTogXCIyXCIsXG4gIG5hbWU6IFwiZGF0YVwiLFxuICBwYXJzZTogKHZhbHVlKSA9PiB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcImRhdGFcIiBwYXJ0cyBleHBlY3QgYW4gYXJyYXkgdmFsdWUuJyk7XG4gICAgfVxuICAgIHJldHVybiB7IHR5cGU6IFwiZGF0YVwiLCB2YWx1ZSB9O1xuICB9XG59O1xudmFyIGVycm9yU3RyZWFtUGFydCA9IHtcbiAgY29kZTogXCIzXCIsXG4gIG5hbWU6IFwiZXJyb3JcIixcbiAgcGFyc2U6ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJlcnJvclwiIHBhcnRzIGV4cGVjdCBhIHN0cmluZyB2YWx1ZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdHlwZTogXCJlcnJvclwiLCB2YWx1ZSB9O1xuICB9XG59O1xudmFyIGFzc2lzdGFudE1lc3NhZ2VTdHJlYW1QYXJ0ID0ge1xuICBjb2RlOiBcIjRcIixcbiAgbmFtZTogXCJhc3Npc3RhbnRfbWVzc2FnZVwiLFxuICBwYXJzZTogKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8ICEoXCJpZFwiIGluIHZhbHVlKSB8fCAhKFwicm9sZVwiIGluIHZhbHVlKSB8fCAhKFwiY29udGVudFwiIGluIHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUuaWQgIT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlLnJvbGUgIT09IFwic3RyaW5nXCIgfHwgdmFsdWUucm9sZSAhPT0gXCJhc3Npc3RhbnRcIiB8fCAhQXJyYXkuaXNBcnJheSh2YWx1ZS5jb250ZW50KSB8fCAhdmFsdWUuY29udGVudC5ldmVyeShcbiAgICAgIChpdGVtKSA9PiBpdGVtICE9IG51bGwgJiYgdHlwZW9mIGl0ZW0gPT09IFwib2JqZWN0XCIgJiYgXCJ0eXBlXCIgaW4gaXRlbSAmJiBpdGVtLnR5cGUgPT09IFwidGV4dFwiICYmIFwidGV4dFwiIGluIGl0ZW0gJiYgaXRlbS50ZXh0ICE9IG51bGwgJiYgdHlwZW9mIGl0ZW0udGV4dCA9PT0gXCJvYmplY3RcIiAmJiBcInZhbHVlXCIgaW4gaXRlbS50ZXh0ICYmIHR5cGVvZiBpdGVtLnRleHQudmFsdWUgPT09IFwic3RyaW5nXCJcbiAgICApKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdcImFzc2lzdGFudF9tZXNzYWdlXCIgcGFydHMgZXhwZWN0IGFuIG9iamVjdCB3aXRoIGFuIFwiaWRcIiwgXCJyb2xlXCIsIGFuZCBcImNvbnRlbnRcIiBwcm9wZXJ0eS4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJhc3Npc3RhbnRfbWVzc2FnZVwiLFxuICAgICAgdmFsdWVcbiAgICB9O1xuICB9XG59O1xudmFyIGFzc2lzdGFudENvbnRyb2xEYXRhU3RyZWFtUGFydCA9IHtcbiAgY29kZTogXCI1XCIsXG4gIG5hbWU6IFwiYXNzaXN0YW50X2NvbnRyb2xfZGF0YVwiLFxuICBwYXJzZTogKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8ICEoXCJ0aHJlYWRJZFwiIGluIHZhbHVlKSB8fCAhKFwibWVzc2FnZUlkXCIgaW4gdmFsdWUpIHx8IHR5cGVvZiB2YWx1ZS50aHJlYWRJZCAhPT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsdWUubWVzc2FnZUlkICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdcImFzc2lzdGFudF9jb250cm9sX2RhdGFcIiBwYXJ0cyBleHBlY3QgYW4gb2JqZWN0IHdpdGggYSBcInRocmVhZElkXCIgYW5kIFwibWVzc2FnZUlkXCIgcHJvcGVydHkuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiYXNzaXN0YW50X2NvbnRyb2xfZGF0YVwiLFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgdGhyZWFkSWQ6IHZhbHVlLnRocmVhZElkLFxuICAgICAgICBtZXNzYWdlSWQ6IHZhbHVlLm1lc3NhZ2VJZFxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG52YXIgZGF0YU1lc3NhZ2VTdHJlYW1QYXJ0ID0ge1xuICBjb2RlOiBcIjZcIixcbiAgbmFtZTogXCJkYXRhX21lc3NhZ2VcIixcbiAgcGFyc2U6ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCAhKFwicm9sZVwiIGluIHZhbHVlKSB8fCAhKFwiZGF0YVwiIGluIHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUucm9sZSAhPT0gXCJzdHJpbmdcIiB8fCB2YWx1ZS5yb2xlICE9PSBcImRhdGFcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnXCJkYXRhX21lc3NhZ2VcIiBwYXJ0cyBleHBlY3QgYW4gb2JqZWN0IHdpdGggYSBcInJvbGVcIiBhbmQgXCJkYXRhXCIgcHJvcGVydHkuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiZGF0YV9tZXNzYWdlXCIsXG4gICAgICB2YWx1ZVxuICAgIH07XG4gIH1cbn07XG52YXIgdG9vbENhbGxTdHJlYW1QYXJ0ID0ge1xuICBjb2RlOiBcIjdcIixcbiAgbmFtZTogXCJ0b29sX2NhbGxzXCIsXG4gIHBhcnNlOiAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgIShcInRvb2xfY2FsbHNcIiBpbiB2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlLnRvb2xfY2FsbHMgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUudG9vbF9jYWxscyA9PSBudWxsIHx8ICFBcnJheS5pc0FycmF5KHZhbHVlLnRvb2xfY2FsbHMpIHx8IHZhbHVlLnRvb2xfY2FsbHMuc29tZShcbiAgICAgICh0YykgPT4gdGMgPT0gbnVsbCB8fCB0eXBlb2YgdGMgIT09IFwib2JqZWN0XCIgfHwgIShcImlkXCIgaW4gdGMpIHx8IHR5cGVvZiB0Yy5pZCAhPT0gXCJzdHJpbmdcIiB8fCAhKFwidHlwZVwiIGluIHRjKSB8fCB0eXBlb2YgdGMudHlwZSAhPT0gXCJzdHJpbmdcIiB8fCAhKFwiZnVuY3Rpb25cIiBpbiB0YykgfHwgdGMuZnVuY3Rpb24gPT0gbnVsbCB8fCB0eXBlb2YgdGMuZnVuY3Rpb24gIT09IFwib2JqZWN0XCIgfHwgIShcImFyZ3VtZW50c1wiIGluIHRjLmZ1bmN0aW9uKSB8fCB0eXBlb2YgdGMuZnVuY3Rpb24ubmFtZSAhPT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdGMuZnVuY3Rpb24uYXJndW1lbnRzICE9PSBcInN0cmluZ1wiXG4gICAgKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnXCJ0b29sX2NhbGxzXCIgcGFydHMgZXhwZWN0IGFuIG9iamVjdCB3aXRoIGEgVG9vbENhbGxQYXlsb2FkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInRvb2xfY2FsbHNcIixcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfVxufTtcbnZhciBtZXNzYWdlQW5ub3RhdGlvbnNTdHJlYW1QYXJ0ID0ge1xuICBjb2RlOiBcIjhcIixcbiAgbmFtZTogXCJtZXNzYWdlX2Fubm90YXRpb25zXCIsXG4gIHBhcnNlOiAodmFsdWUpID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wibWVzc2FnZV9hbm5vdGF0aW9uc1wiIHBhcnRzIGV4cGVjdCBhbiBhcnJheSB2YWx1ZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdHlwZTogXCJtZXNzYWdlX2Fubm90YXRpb25zXCIsIHZhbHVlIH07XG4gIH1cbn07XG52YXIgc3RyZWFtUGFydHMgPSBbXG4gIHRleHRTdHJlYW1QYXJ0LFxuICBmdW5jdGlvbkNhbGxTdHJlYW1QYXJ0LFxuICBkYXRhU3RyZWFtUGFydCxcbiAgZXJyb3JTdHJlYW1QYXJ0LFxuICBhc3Npc3RhbnRNZXNzYWdlU3RyZWFtUGFydCxcbiAgYXNzaXN0YW50Q29udHJvbERhdGFTdHJlYW1QYXJ0LFxuICBkYXRhTWVzc2FnZVN0cmVhbVBhcnQsXG4gIHRvb2xDYWxsU3RyZWFtUGFydCxcbiAgbWVzc2FnZUFubm90YXRpb25zU3RyZWFtUGFydFxuXTtcbnZhciBzdHJlYW1QYXJ0c0J5Q29kZSA9IHtcbiAgW3RleHRTdHJlYW1QYXJ0LmNvZGVdOiB0ZXh0U3RyZWFtUGFydCxcbiAgW2Z1bmN0aW9uQ2FsbFN0cmVhbVBhcnQuY29kZV06IGZ1bmN0aW9uQ2FsbFN0cmVhbVBhcnQsXG4gIFtkYXRhU3RyZWFtUGFydC5jb2RlXTogZGF0YVN0cmVhbVBhcnQsXG4gIFtlcnJvclN0cmVhbVBhcnQuY29kZV06IGVycm9yU3RyZWFtUGFydCxcbiAgW2Fzc2lzdGFudE1lc3NhZ2VTdHJlYW1QYXJ0LmNvZGVdOiBhc3Npc3RhbnRNZXNzYWdlU3RyZWFtUGFydCxcbiAgW2Fzc2lzdGFudENvbnRyb2xEYXRhU3RyZWFtUGFydC5jb2RlXTogYXNzaXN0YW50Q29udHJvbERhdGFTdHJlYW1QYXJ0LFxuICBbZGF0YU1lc3NhZ2VTdHJlYW1QYXJ0LmNvZGVdOiBkYXRhTWVzc2FnZVN0cmVhbVBhcnQsXG4gIFt0b29sQ2FsbFN0cmVhbVBhcnQuY29kZV06IHRvb2xDYWxsU3RyZWFtUGFydCxcbiAgW21lc3NhZ2VBbm5vdGF0aW9uc1N0cmVhbVBhcnQuY29kZV06IG1lc3NhZ2VBbm5vdGF0aW9uc1N0cmVhbVBhcnRcbn07XG52YXIgU3RyZWFtU3RyaW5nUHJlZml4ZXMgPSB7XG4gIFt0ZXh0U3RyZWFtUGFydC5uYW1lXTogdGV4dFN0cmVhbVBhcnQuY29kZSxcbiAgW2Z1bmN0aW9uQ2FsbFN0cmVhbVBhcnQubmFtZV06IGZ1bmN0aW9uQ2FsbFN0cmVhbVBhcnQuY29kZSxcbiAgW2RhdGFTdHJlYW1QYXJ0Lm5hbWVdOiBkYXRhU3RyZWFtUGFydC5jb2RlLFxuICBbZXJyb3JTdHJlYW1QYXJ0Lm5hbWVdOiBlcnJvclN0cmVhbVBhcnQuY29kZSxcbiAgW2Fzc2lzdGFudE1lc3NhZ2VTdHJlYW1QYXJ0Lm5hbWVdOiBhc3Npc3RhbnRNZXNzYWdlU3RyZWFtUGFydC5jb2RlLFxuICBbYXNzaXN0YW50Q29udHJvbERhdGFTdHJlYW1QYXJ0Lm5hbWVdOiBhc3Npc3RhbnRDb250cm9sRGF0YVN0cmVhbVBhcnQuY29kZSxcbiAgW2RhdGFNZXNzYWdlU3RyZWFtUGFydC5uYW1lXTogZGF0YU1lc3NhZ2VTdHJlYW1QYXJ0LmNvZGUsXG4gIFt0b29sQ2FsbFN0cmVhbVBhcnQubmFtZV06IHRvb2xDYWxsU3RyZWFtUGFydC5jb2RlLFxuICBbbWVzc2FnZUFubm90YXRpb25zU3RyZWFtUGFydC5uYW1lXTogbWVzc2FnZUFubm90YXRpb25zU3RyZWFtUGFydC5jb2RlXG59O1xudmFyIHZhbGlkQ29kZXMgPSBzdHJlYW1QYXJ0cy5tYXAoKHBhcnQpID0+IHBhcnQuY29kZSk7XG52YXIgcGFyc2VTdHJlYW1QYXJ0ID0gKGxpbmUpID0+IHtcbiAgY29uc3QgZmlyc3RTZXBhcmF0b3JJbmRleCA9IGxpbmUuaW5kZXhPZihcIjpcIik7XG4gIGlmIChmaXJzdFNlcGFyYXRvckluZGV4ID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBzdHJlYW0gc3RyaW5nLiBObyBzZXBhcmF0b3IgZm91bmQuXCIpO1xuICB9XG4gIGNvbnN0IHByZWZpeCA9IGxpbmUuc2xpY2UoMCwgZmlyc3RTZXBhcmF0b3JJbmRleCk7XG4gIGlmICghdmFsaWRDb2Rlcy5pbmNsdWRlcyhwcmVmaXgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcGFyc2Ugc3RyZWFtIHN0cmluZy4gSW52YWxpZCBjb2RlICR7cHJlZml4fS5gKTtcbiAgfVxuICBjb25zdCBjb2RlID0gcHJlZml4O1xuICBjb25zdCB0ZXh0VmFsdWUgPSBsaW5lLnNsaWNlKGZpcnN0U2VwYXJhdG9ySW5kZXggKyAxKTtcbiAgY29uc3QganNvblZhbHVlID0gSlNPTi5wYXJzZSh0ZXh0VmFsdWUpO1xuICByZXR1cm4gc3RyZWFtUGFydHNCeUNvZGVbY29kZV0ucGFyc2UoanNvblZhbHVlKTtcbn07XG5cbi8vIHNoYXJlZC9yZWFkLWRhdGEtc3RyZWFtLnRzXG52YXIgTkVXTElORSA9IFwiXFxuXCIuY2hhckNvZGVBdCgwKTtcbmZ1bmN0aW9uIGNvbmNhdENodW5rcyhjaHVua3MsIHRvdGFsTGVuZ3RoKSB7XG4gIGNvbnN0IGNvbmNhdGVuYXRlZENodW5rcyA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGZvciAoY29uc3QgY2h1bmsgb2YgY2h1bmtzKSB7XG4gICAgY29uY2F0ZW5hdGVkQ2h1bmtzLnNldChjaHVuaywgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gY2h1bmsubGVuZ3RoO1xuICB9XG4gIGNodW5rcy5sZW5ndGggPSAwO1xuICByZXR1cm4gY29uY2F0ZW5hdGVkQ2h1bmtzO1xufVxuYXN5bmMgZnVuY3Rpb24qIHJlYWREYXRhU3RyZWFtKHJlYWRlciwge1xuICBpc0Fib3J0ZWRcbn0gPSB7fSkge1xuICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG4gIGNvbnN0IGNodW5rcyA9IFtdO1xuICBsZXQgdG90YWxMZW5ndGggPSAwO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjaHVua3MucHVzaCh2YWx1ZSk7XG4gICAgICB0b3RhbExlbmd0aCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gIT09IE5FV0xJTkUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY29uc3QgY29uY2F0ZW5hdGVkQ2h1bmtzID0gY29uY2F0Q2h1bmtzKGNodW5rcywgdG90YWxMZW5ndGgpO1xuICAgIHRvdGFsTGVuZ3RoID0gMDtcbiAgICBjb25zdCBzdHJlYW1QYXJ0czIgPSBkZWNvZGVyLmRlY29kZShjb25jYXRlbmF0ZWRDaHVua3MsIHsgc3RyZWFtOiB0cnVlIH0pLnNwbGl0KFwiXFxuXCIpLmZpbHRlcigobGluZSkgPT4gbGluZSAhPT0gXCJcIikubWFwKHBhcnNlU3RyZWFtUGFydCk7XG4gICAgZm9yIChjb25zdCBzdHJlYW1QYXJ0IG9mIHN0cmVhbVBhcnRzMikge1xuICAgICAgeWllbGQgc3RyZWFtUGFydDtcbiAgICB9XG4gICAgaWYgKGlzQWJvcnRlZCA9PSBudWxsID8gdm9pZCAwIDogaXNBYm9ydGVkKCkpIHtcbiAgICAgIHJlYWRlci5jYW5jZWwoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuXG4vLyBzaGFyZWQvZ2VuZXJhdGUtaWQudHNcbmltcG9ydCB7IGN1c3RvbUFscGhhYmV0IH0gZnJvbSBcIm5hbm9pZC9ub24tc2VjdXJlXCI7XG52YXIgZ2VuZXJhdGVJZCA9IGN1c3RvbUFscGhhYmV0KFxuICBcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCIsXG4gIDdcbik7XG5cbi8vIHNoYXJlZC9wYXJzZS1jb21wbGV4LXJlc3BvbnNlLnRzXG5mdW5jdGlvbiBhc3NpZ25Bbm5vdGF0aW9uc1RvTWVzc2FnZShtZXNzYWdlLCBhbm5vdGF0aW9ucykge1xuICBpZiAoIW1lc3NhZ2UgfHwgIWFubm90YXRpb25zIHx8ICFhbm5vdGF0aW9ucy5sZW5ndGgpXG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIHJldHVybiB7IC4uLm1lc3NhZ2UsIGFubm90YXRpb25zOiBbLi4uYW5ub3RhdGlvbnNdIH07XG59XG5hc3luYyBmdW5jdGlvbiBwYXJzZUNvbXBsZXhSZXNwb25zZSh7XG4gIHJlYWRlcixcbiAgYWJvcnRDb250cm9sbGVyUmVmLFxuICB1cGRhdGUsXG4gIG9uRmluaXNoLFxuICBnZW5lcmF0ZUlkOiBnZW5lcmF0ZUlkMiA9IGdlbmVyYXRlSWQsXG4gIGdldEN1cnJlbnREYXRlID0gKCkgPT4gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKClcbn0pIHtcbiAgY29uc3QgY3JlYXRlZEF0ID0gZ2V0Q3VycmVudERhdGUoKTtcbiAgY29uc3QgcHJlZml4TWFwID0ge1xuICAgIGRhdGE6IFtdXG4gIH07XG4gIGxldCBtZXNzYWdlX2Fubm90YXRpb25zID0gdm9pZCAwO1xuICBmb3IgYXdhaXQgKGNvbnN0IHsgdHlwZSwgdmFsdWUgfSBvZiByZWFkRGF0YVN0cmVhbShyZWFkZXIsIHtcbiAgICBpc0Fib3J0ZWQ6ICgpID0+IChhYm9ydENvbnRyb2xsZXJSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50KSA9PT0gbnVsbFxuICB9KSkge1xuICAgIGlmICh0eXBlID09PSBcInRleHRcIikge1xuICAgICAgaWYgKHByZWZpeE1hcFtcInRleHRcIl0pIHtcbiAgICAgICAgcHJlZml4TWFwW1widGV4dFwiXSA9IHtcbiAgICAgICAgICAuLi5wcmVmaXhNYXBbXCJ0ZXh0XCJdLFxuICAgICAgICAgIGNvbnRlbnQ6IChwcmVmaXhNYXBbXCJ0ZXh0XCJdLmNvbnRlbnQgfHwgXCJcIikgKyB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJlZml4TWFwW1widGV4dFwiXSA9IHtcbiAgICAgICAgICBpZDogZ2VuZXJhdGVJZDIoKSxcbiAgICAgICAgICByb2xlOiBcImFzc2lzdGFudFwiLFxuICAgICAgICAgIGNvbnRlbnQ6IHZhbHVlLFxuICAgICAgICAgIGNyZWF0ZWRBdFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgZnVuY3Rpb25DYWxsTWVzc2FnZSA9IG51bGw7XG4gICAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25fY2FsbFwiKSB7XG4gICAgICBwcmVmaXhNYXBbXCJmdW5jdGlvbl9jYWxsXCJdID0ge1xuICAgICAgICBpZDogZ2VuZXJhdGVJZDIoKSxcbiAgICAgICAgcm9sZTogXCJhc3Npc3RhbnRcIixcbiAgICAgICAgY29udGVudDogXCJcIixcbiAgICAgICAgZnVuY3Rpb25fY2FsbDogdmFsdWUuZnVuY3Rpb25fY2FsbCxcbiAgICAgICAgbmFtZTogdmFsdWUuZnVuY3Rpb25fY2FsbC5uYW1lLFxuICAgICAgICBjcmVhdGVkQXRcbiAgICAgIH07XG4gICAgICBmdW5jdGlvbkNhbGxNZXNzYWdlID0gcHJlZml4TWFwW1wiZnVuY3Rpb25fY2FsbFwiXTtcbiAgICB9XG4gICAgbGV0IHRvb2xDYWxsTWVzc2FnZSA9IG51bGw7XG4gICAgaWYgKHR5cGUgPT09IFwidG9vbF9jYWxsc1wiKSB7XG4gICAgICBwcmVmaXhNYXBbXCJ0b29sX2NhbGxzXCJdID0ge1xuICAgICAgICBpZDogZ2VuZXJhdGVJZDIoKSxcbiAgICAgICAgcm9sZTogXCJhc3Npc3RhbnRcIixcbiAgICAgICAgY29udGVudDogXCJcIixcbiAgICAgICAgdG9vbF9jYWxsczogdmFsdWUudG9vbF9jYWxscyxcbiAgICAgICAgY3JlYXRlZEF0XG4gICAgICB9O1xuICAgICAgdG9vbENhbGxNZXNzYWdlID0gcHJlZml4TWFwW1widG9vbF9jYWxsc1wiXTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFwiZGF0YVwiKSB7XG4gICAgICBwcmVmaXhNYXBbXCJkYXRhXCJdLnB1c2goLi4udmFsdWUpO1xuICAgIH1cbiAgICBsZXQgcmVzcG9uc2VNZXNzYWdlID0gcHJlZml4TWFwW1widGV4dFwiXTtcbiAgICBpZiAodHlwZSA9PT0gXCJtZXNzYWdlX2Fubm90YXRpb25zXCIpIHtcbiAgICAgIGlmICghbWVzc2FnZV9hbm5vdGF0aW9ucykge1xuICAgICAgICBtZXNzYWdlX2Fubm90YXRpb25zID0gWy4uLnZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lc3NhZ2VfYW5ub3RhdGlvbnMucHVzaCguLi52YWx1ZSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbkNhbGxNZXNzYWdlID0gYXNzaWduQW5ub3RhdGlvbnNUb01lc3NhZ2UoXG4gICAgICAgIHByZWZpeE1hcFtcImZ1bmN0aW9uX2NhbGxcIl0sXG4gICAgICAgIG1lc3NhZ2VfYW5ub3RhdGlvbnNcbiAgICAgICk7XG4gICAgICB0b29sQ2FsbE1lc3NhZ2UgPSBhc3NpZ25Bbm5vdGF0aW9uc1RvTWVzc2FnZShcbiAgICAgICAgcHJlZml4TWFwW1widG9vbF9jYWxsc1wiXSxcbiAgICAgICAgbWVzc2FnZV9hbm5vdGF0aW9uc1xuICAgICAgKTtcbiAgICAgIHJlc3BvbnNlTWVzc2FnZSA9IGFzc2lnbkFubm90YXRpb25zVG9NZXNzYWdlKFxuICAgICAgICBwcmVmaXhNYXBbXCJ0ZXh0XCJdLFxuICAgICAgICBtZXNzYWdlX2Fubm90YXRpb25zXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZV9hbm5vdGF0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogbWVzc2FnZV9hbm5vdGF0aW9ucy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VQcmVmaXhLZXlzID0gW1xuICAgICAgICBcInRleHRcIixcbiAgICAgICAgXCJmdW5jdGlvbl9jYWxsXCIsXG4gICAgICAgIFwidG9vbF9jYWxsc1wiXG4gICAgICBdO1xuICAgICAgbWVzc2FnZVByZWZpeEtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGlmIChwcmVmaXhNYXBba2V5XSkge1xuICAgICAgICAgIHByZWZpeE1hcFtrZXldLmFubm90YXRpb25zID0gWy4uLm1lc3NhZ2VfYW5ub3RhdGlvbnNdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgbWVyZ2VkID0gW2Z1bmN0aW9uQ2FsbE1lc3NhZ2UsIHRvb2xDYWxsTWVzc2FnZSwgcmVzcG9uc2VNZXNzYWdlXS5maWx0ZXIoQm9vbGVhbikubWFwKChtZXNzYWdlKSA9PiAoe1xuICAgICAgLi4uYXNzaWduQW5ub3RhdGlvbnNUb01lc3NhZ2UobWVzc2FnZSwgbWVzc2FnZV9hbm5vdGF0aW9ucylcbiAgICB9KSk7XG4gICAgdXBkYXRlKG1lcmdlZCwgWy4uLnByZWZpeE1hcFtcImRhdGFcIl1dKTtcbiAgfVxuICBvbkZpbmlzaCA9PSBudWxsID8gdm9pZCAwIDogb25GaW5pc2gocHJlZml4TWFwKTtcbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlczogW1xuICAgICAgcHJlZml4TWFwLnRleHQsXG4gICAgICBwcmVmaXhNYXAuZnVuY3Rpb25fY2FsbCxcbiAgICAgIHByZWZpeE1hcC50b29sX2NhbGxzXG4gICAgXS5maWx0ZXIoQm9vbGVhbiksXG4gICAgZGF0YTogcHJlZml4TWFwLmRhdGFcbiAgfTtcbn1cblxuLy8gc2hhcmVkL2NhbGwtY2hhdC1hcGkudHNcbmFzeW5jIGZ1bmN0aW9uIGNhbGxDaGF0QXBpKHtcbiAgYXBpLFxuICBtZXNzYWdlcyxcbiAgYm9keSxcbiAgY3JlZGVudGlhbHMsXG4gIGhlYWRlcnMsXG4gIGFib3J0Q29udHJvbGxlcixcbiAgcmVzdG9yZU1lc3NhZ2VzT25GYWlsdXJlLFxuICBvblJlc3BvbnNlLFxuICBvblVwZGF0ZSxcbiAgb25GaW5pc2gsXG4gIGdlbmVyYXRlSWQ6IGdlbmVyYXRlSWQyXG59KSB7XG4gIHZhciBfYTtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGksIHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIG1lc3NhZ2VzLFxuICAgICAgLi4uYm9keVxuICAgIH0pLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgLi4uaGVhZGVyc1xuICAgIH0sXG4gICAgc2lnbmFsOiAoX2EgPSBhYm9ydENvbnRyb2xsZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGFib3J0Q29udHJvbGxlcigpKSA9PSBudWxsID8gdm9pZCAwIDogX2Euc2lnbmFsLFxuICAgIGNyZWRlbnRpYWxzXG4gIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICByZXN0b3JlTWVzc2FnZXNPbkZhaWx1cmUoKTtcbiAgICB0aHJvdyBlcnI7XG4gIH0pO1xuICBpZiAob25SZXNwb25zZSkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBvblJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHJlc3RvcmVNZXNzYWdlc09uRmFpbHVyZSgpO1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGF3YWl0IHJlc3BvbnNlLnRleHQoKSB8fCBcIkZhaWxlZCB0byBmZXRjaCB0aGUgY2hhdCByZXNwb25zZS5cIlxuICAgICk7XG4gIH1cbiAgaWYgKCFyZXNwb25zZS5ib2R5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJlc3BvbnNlIGJvZHkgaXMgZW1wdHkuXCIpO1xuICB9XG4gIGNvbnN0IHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG4gIHJldHVybiBhd2FpdCBwYXJzZUNvbXBsZXhSZXNwb25zZSh7XG4gICAgcmVhZGVyLFxuICAgIGFib3J0Q29udHJvbGxlclJlZjogYWJvcnRDb250cm9sbGVyICE9IG51bGwgPyB7IGN1cnJlbnQ6IGFib3J0Q29udHJvbGxlcigpIH0gOiB2b2lkIDAsXG4gICAgdXBkYXRlOiBvblVwZGF0ZSxcbiAgICBvbkZpbmlzaChwcmVmaXhNYXApIHtcbiAgICAgIGlmIChvbkZpbmlzaCAmJiBwcmVmaXhNYXAudGV4dCAhPSBudWxsKSB7XG4gICAgICAgIG9uRmluaXNoKHByZWZpeE1hcC50ZXh0KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdlbmVyYXRlSWQ6IGdlbmVyYXRlSWQyXG4gIH0pO1xufVxuXG4vLyBzaGFyZWQvcHJvY2Vzcy1jaGF0LXN0cmVhbS50c1xuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0NoYXRTdHJlYW0oe1xuICBnZXRTdHJlYW1lZFJlc3BvbnNlOiBnZXRTdHJlYW1lZFJlc3BvbnNlMixcbiAgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsLFxuICBleHBlcmltZW50YWxfb25Ub29sQ2FsbCxcbiAgdXBkYXRlQ2hhdFJlcXVlc3QsXG4gIGdldEN1cnJlbnRNZXNzYWdlc1xufSkge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IG1lc3NhZ2VzQW5kRGF0YU9ySnVzdE1lc3NhZ2UgPSBhd2FpdCBnZXRTdHJlYW1lZFJlc3BvbnNlMigpO1xuICAgIGlmIChcIm1lc3NhZ2VzXCIgaW4gbWVzc2FnZXNBbmREYXRhT3JKdXN0TWVzc2FnZSkge1xuICAgICAgbGV0IGhhc0ZvbGxvd2luZ1Jlc3BvbnNlID0gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXNBbmREYXRhT3JKdXN0TWVzc2FnZS5tZXNzYWdlcykge1xuICAgICAgICBpZiAoKG1lc3NhZ2UuZnVuY3Rpb25fY2FsbCA9PT0gdm9pZCAwIHx8IHR5cGVvZiBtZXNzYWdlLmZ1bmN0aW9uX2NhbGwgPT09IFwic3RyaW5nXCIpICYmIChtZXNzYWdlLnRvb2xfY2FsbHMgPT09IHZvaWQgMCB8fCB0eXBlb2YgbWVzc2FnZS50b29sX2NhbGxzID09PSBcInN0cmluZ1wiKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGhhc0ZvbGxvd2luZ1Jlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGV4cGVyaW1lbnRhbF9vbkZ1bmN0aW9uQ2FsbCkge1xuICAgICAgICAgIGNvbnN0IGZ1bmN0aW9uQ2FsbCA9IG1lc3NhZ2UuZnVuY3Rpb25fY2FsbDtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9uQ2FsbCAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICBcImV4cGVyaW1lbnRhbF9vbkZ1bmN0aW9uQ2FsbCBzaG91bGQgbm90IGJlIGRlZmluZWQgd2hlbiB1c2luZyB0b29sc1wiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGZ1bmN0aW9uQ2FsbFJlc3BvbnNlID0gYXdhaXQgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsKFxuICAgICAgICAgICAgZ2V0Q3VycmVudE1lc3NhZ2VzKCksXG4gICAgICAgICAgICBmdW5jdGlvbkNhbGxcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChmdW5jdGlvbkNhbGxSZXNwb25zZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBoYXNGb2xsb3dpbmdSZXNwb25zZSA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZUNoYXRSZXF1ZXN0KGZ1bmN0aW9uQ2FsbFJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwZXJpbWVudGFsX29uVG9vbENhbGwpIHtcbiAgICAgICAgICBjb25zdCB0b29sQ2FsbHMgPSBtZXNzYWdlLnRvb2xfY2FsbHM7XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRvb2xDYWxscykgfHwgdG9vbENhbGxzLnNvbWUoKHRvb2xDYWxsKSA9PiB0eXBlb2YgdG9vbENhbGwgIT09IFwib2JqZWN0XCIpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgIFwiZXhwZXJpbWVudGFsX29uVG9vbENhbGwgc2hvdWxkIG5vdCBiZSBkZWZpbmVkIHdoZW4gdXNpbmcgdG9vbHNcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB0b29sQ2FsbFJlc3BvbnNlID0gYXdhaXQgZXhwZXJpbWVudGFsX29uVG9vbENhbGwoZ2V0Q3VycmVudE1lc3NhZ2VzKCksIHRvb2xDYWxscyk7XG4gICAgICAgICAgaWYgKHRvb2xDYWxsUmVzcG9uc2UgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgaGFzRm9sbG93aW5nUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVDaGF0UmVxdWVzdCh0b29sQ2FsbFJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFoYXNGb2xsb3dpbmdSZXNwb25zZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGZpeEZ1bmN0aW9uQ2FsbEFyZ3VtZW50czIgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgcmVzcG9uc2UubWVzc2FnZXMpIHtcbiAgICAgICAgICBpZiAobWVzc2FnZS50b29sX2NhbGxzICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9vbENhbGwgb2YgbWVzc2FnZS50b29sX2NhbGxzKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdG9vbENhbGwgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzICYmIHR5cGVvZiB0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50cyA9IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgICAgICB0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtZXNzYWdlLmZ1bmN0aW9uX2NhbGwgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLmZ1bmN0aW9uX2NhbGwgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZnVuY3Rpb25fY2FsbC5hcmd1bWVudHMgJiYgdHlwZW9mIG1lc3NhZ2UuZnVuY3Rpb25fY2FsbC5hcmd1bWVudHMgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmZ1bmN0aW9uX2NhbGwuYXJndW1lbnRzID0gSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlLmZ1bmN0aW9uX2NhbGwuYXJndW1lbnRzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBmaXhGdW5jdGlvbkNhbGxBcmd1bWVudHMgPSBmaXhGdW5jdGlvbkNhbGxBcmd1bWVudHMyO1xuICAgICAgY29uc3Qgc3RyZWFtZWRSZXNwb25zZU1lc3NhZ2UgPSBtZXNzYWdlc0FuZERhdGFPckp1c3RNZXNzYWdlO1xuICAgICAgaWYgKChzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZS5mdW5jdGlvbl9jYWxsID09PSB2b2lkIDAgfHwgdHlwZW9mIHN0cmVhbWVkUmVzcG9uc2VNZXNzYWdlLmZ1bmN0aW9uX2NhbGwgPT09IFwic3RyaW5nXCIpICYmIChzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZS50b29sX2NhbGxzID09PSB2b2lkIDAgfHwgdHlwZW9mIHN0cmVhbWVkUmVzcG9uc2VNZXNzYWdlLnRvb2xfY2FsbHMgPT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGV4cGVyaW1lbnRhbF9vbkZ1bmN0aW9uQ2FsbCkge1xuICAgICAgICBjb25zdCBmdW5jdGlvbkNhbGwgPSBzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZS5mdW5jdGlvbl9jYWxsO1xuICAgICAgICBpZiAoISh0eXBlb2YgZnVuY3Rpb25DYWxsID09PSBcIm9iamVjdFwiKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsIHNob3VsZCBub3QgYmUgZGVmaW5lZCB3aGVuIHVzaW5nIHRvb2xzXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uQ2FsbFJlc3BvbnNlID0gYXdhaXQgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsKGdldEN1cnJlbnRNZXNzYWdlcygpLCBmdW5jdGlvbkNhbGwpO1xuICAgICAgICBpZiAoZnVuY3Rpb25DYWxsUmVzcG9uc2UgPT09IHZvaWQgMClcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZml4RnVuY3Rpb25DYWxsQXJndW1lbnRzMihmdW5jdGlvbkNhbGxSZXNwb25zZSk7XG4gICAgICAgIHVwZGF0ZUNoYXRSZXF1ZXN0KGZ1bmN0aW9uQ2FsbFJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChleHBlcmltZW50YWxfb25Ub29sQ2FsbCkge1xuICAgICAgICBjb25zdCB0b29sQ2FsbHMgPSBzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZS50b29sX2NhbGxzO1xuICAgICAgICBpZiAoISh0eXBlb2YgdG9vbENhbGxzID09PSBcIm9iamVjdFwiKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiZXhwZXJpbWVudGFsX29uVG9vbENhbGwgc2hvdWxkIG5vdCBiZSBkZWZpbmVkIHdoZW4gdXNpbmcgZnVuY3Rpb25zXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvb2xDYWxsUmVzcG9uc2UgPSBhd2FpdCBleHBlcmltZW50YWxfb25Ub29sQ2FsbChnZXRDdXJyZW50TWVzc2FnZXMoKSwgdG9vbENhbGxzKTtcbiAgICAgICAgaWYgKHRvb2xDYWxsUmVzcG9uc2UgPT09IHZvaWQgMClcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZml4RnVuY3Rpb25DYWxsQXJndW1lbnRzMih0b29sQ2FsbFJlc3BvbnNlKTtcbiAgICAgICAgdXBkYXRlQ2hhdFJlcXVlc3QodG9vbENhbGxSZXNwb25zZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlYWN0L3VzZS1jaGF0LnRzXG52YXIgZ2V0U3RyZWFtZWRSZXNwb25zZSA9IGFzeW5jIChhcGksIGNoYXRSZXF1ZXN0LCBtdXRhdGUsIG11dGF0ZVN0cmVhbURhdGEsIGV4aXN0aW5nRGF0YSwgZXh0cmFNZXRhZGF0YVJlZiwgbWVzc2FnZXNSZWYsIGFib3J0Q29udHJvbGxlclJlZiwgZ2VuZXJhdGVJZDIsIG9uRmluaXNoLCBvblJlc3BvbnNlLCBzZW5kRXh0cmFNZXNzYWdlRmllbGRzKSA9PiB7XG4gIHZhciBfYSwgX2I7XG4gIGNvbnN0IHByZXZpb3VzTWVzc2FnZXMgPSBtZXNzYWdlc1JlZi5jdXJyZW50O1xuICBtdXRhdGUoY2hhdFJlcXVlc3QubWVzc2FnZXMsIGZhbHNlKTtcbiAgY29uc3QgY29uc3RydWN0ZWRNZXNzYWdlc1BheWxvYWQgPSBzZW5kRXh0cmFNZXNzYWdlRmllbGRzID8gY2hhdFJlcXVlc3QubWVzc2FnZXMgOiBjaGF0UmVxdWVzdC5tZXNzYWdlcy5tYXAoXG4gICAgKHsgcm9sZSwgY29udGVudCwgbmFtZSwgZnVuY3Rpb25fY2FsbCwgdG9vbF9jYWxscywgdG9vbF9jYWxsX2lkIH0pID0+ICh7XG4gICAgICByb2xlLFxuICAgICAgY29udGVudCxcbiAgICAgIHRvb2xfY2FsbF9pZCxcbiAgICAgIC4uLm5hbWUgIT09IHZvaWQgMCAmJiB7IG5hbWUgfSxcbiAgICAgIC4uLmZ1bmN0aW9uX2NhbGwgIT09IHZvaWQgMCAmJiB7XG4gICAgICAgIGZ1bmN0aW9uX2NhbGxcbiAgICAgIH0sXG4gICAgICAuLi50b29sX2NhbGxzICE9PSB2b2lkIDAgJiYge1xuICAgICAgICB0b29sX2NhbGxzXG4gICAgICB9XG4gICAgfSlcbiAgKTtcbiAgaWYgKHR5cGVvZiBhcGkgIT09IFwic3RyaW5nXCIpIHtcbiAgICBjb25zdCByZXBseUlkID0gZ2VuZXJhdGVJZDIoKTtcbiAgICBjb25zdCBjcmVhdGVkQXQgPSAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKTtcbiAgICBsZXQgcmVzcG9uc2VNZXNzYWdlID0ge1xuICAgICAgaWQ6IHJlcGx5SWQsXG4gICAgICBjcmVhdGVkQXQsXG4gICAgICBjb250ZW50OiBcIlwiLFxuICAgICAgcm9sZTogXCJhc3Npc3RhbnRcIlxuICAgIH07XG4gICAgYXN5bmMgZnVuY3Rpb24gcmVhZFJvdyhwcm9taXNlKSB7XG4gICAgICBjb25zdCB7IGNvbnRlbnQsIHVpLCBuZXh0IH0gPSBhd2FpdCBwcm9taXNlO1xuICAgICAgcmVzcG9uc2VNZXNzYWdlW1wiY29udGVudFwiXSA9IGNvbnRlbnQ7XG4gICAgICByZXNwb25zZU1lc3NhZ2VbXCJ1aVwiXSA9IGF3YWl0IHVpO1xuICAgICAgbXV0YXRlKFsuLi5jaGF0UmVxdWVzdC5tZXNzYWdlcywgeyAuLi5yZXNwb25zZU1lc3NhZ2UgfV0sIGZhbHNlKTtcbiAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgIGF3YWl0IHJlYWRSb3cobmV4dCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBwcm9taXNlID0gYXBpKHtcbiAgICAgICAgbWVzc2FnZXM6IGNvbnN0cnVjdGVkTWVzc2FnZXNQYXlsb2FkLFxuICAgICAgICBkYXRhOiBjaGF0UmVxdWVzdC5kYXRhXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHJlYWRSb3cocHJvbWlzZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbXV0YXRlKHByZXZpb3VzTWVzc2FnZXMsIGZhbHNlKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIGlmIChvbkZpbmlzaCkge1xuICAgICAgb25GaW5pc2gocmVzcG9uc2VNZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlTWVzc2FnZTtcbiAgfVxuICByZXR1cm4gYXdhaXQgY2FsbENoYXRBcGkoe1xuICAgIGFwaSxcbiAgICBtZXNzYWdlczogY29uc3RydWN0ZWRNZXNzYWdlc1BheWxvYWQsXG4gICAgYm9keToge1xuICAgICAgZGF0YTogY2hhdFJlcXVlc3QuZGF0YSxcbiAgICAgIC4uLmV4dHJhTWV0YWRhdGFSZWYuY3VycmVudC5ib2R5LFxuICAgICAgLi4uKF9hID0gY2hhdFJlcXVlc3Qub3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmJvZHksXG4gICAgICAuLi5jaGF0UmVxdWVzdC5mdW5jdGlvbnMgIT09IHZvaWQgMCAmJiB7XG4gICAgICAgIGZ1bmN0aW9uczogY2hhdFJlcXVlc3QuZnVuY3Rpb25zXG4gICAgICB9LFxuICAgICAgLi4uY2hhdFJlcXVlc3QuZnVuY3Rpb25fY2FsbCAhPT0gdm9pZCAwICYmIHtcbiAgICAgICAgZnVuY3Rpb25fY2FsbDogY2hhdFJlcXVlc3QuZnVuY3Rpb25fY2FsbFxuICAgICAgfSxcbiAgICAgIC4uLmNoYXRSZXF1ZXN0LnRvb2xzICE9PSB2b2lkIDAgJiYge1xuICAgICAgICB0b29sczogY2hhdFJlcXVlc3QudG9vbHNcbiAgICAgIH0sXG4gICAgICAuLi5jaGF0UmVxdWVzdC50b29sX2Nob2ljZSAhPT0gdm9pZCAwICYmIHtcbiAgICAgICAgdG9vbF9jaG9pY2U6IGNoYXRSZXF1ZXN0LnRvb2xfY2hvaWNlXG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVkZW50aWFsczogZXh0cmFNZXRhZGF0YVJlZi5jdXJyZW50LmNyZWRlbnRpYWxzLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIC4uLmV4dHJhTWV0YWRhdGFSZWYuY3VycmVudC5oZWFkZXJzLFxuICAgICAgLi4uKF9iID0gY2hhdFJlcXVlc3Qub3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmhlYWRlcnNcbiAgICB9LFxuICAgIGFib3J0Q29udHJvbGxlcjogKCkgPT4gYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQsXG4gICAgcmVzdG9yZU1lc3NhZ2VzT25GYWlsdXJlKCkge1xuICAgICAgbXV0YXRlKHByZXZpb3VzTWVzc2FnZXMsIGZhbHNlKTtcbiAgICB9LFxuICAgIG9uUmVzcG9uc2UsXG4gICAgb25VcGRhdGUobWVyZ2VkLCBkYXRhKSB7XG4gICAgICBtdXRhdGUoWy4uLmNoYXRSZXF1ZXN0Lm1lc3NhZ2VzLCAuLi5tZXJnZWRdLCBmYWxzZSk7XG4gICAgICBtdXRhdGVTdHJlYW1EYXRhKFsuLi5leGlzdGluZ0RhdGEgfHwgW10sIC4uLmRhdGEgfHwgW11dLCBmYWxzZSk7XG4gICAgfSxcbiAgICBvbkZpbmlzaCxcbiAgICBnZW5lcmF0ZUlkOiBnZW5lcmF0ZUlkMlxuICB9KTtcbn07XG5mdW5jdGlvbiB1c2VDaGF0KHtcbiAgYXBpID0gXCIvYXBpL2NoYXRcIixcbiAgaWQsXG4gIGluaXRpYWxNZXNzYWdlcyxcbiAgaW5pdGlhbElucHV0ID0gXCJcIixcbiAgc2VuZEV4dHJhTWVzc2FnZUZpZWxkcyxcbiAgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsLFxuICBleHBlcmltZW50YWxfb25Ub29sQ2FsbCxcbiAgb25SZXNwb25zZSxcbiAgb25GaW5pc2gsXG4gIG9uRXJyb3IsXG4gIGNyZWRlbnRpYWxzLFxuICBoZWFkZXJzLFxuICBib2R5LFxuICBnZW5lcmF0ZUlkOiBnZW5lcmF0ZUlkMiA9IGdlbmVyYXRlSWRcbn0gPSB7fSkge1xuICBjb25zdCBob29rSWQgPSB1c2VJZCgpO1xuICBjb25zdCBpZEtleSA9IGlkICE9IG51bGwgPyBpZCA6IGhvb2tJZDtcbiAgY29uc3QgY2hhdEtleSA9IHR5cGVvZiBhcGkgPT09IFwic3RyaW5nXCIgPyBbYXBpLCBpZEtleV0gOiBpZEtleTtcbiAgY29uc3QgW2luaXRpYWxNZXNzYWdlc0ZhbGxiYWNrXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgeyBkYXRhOiBtZXNzYWdlcywgbXV0YXRlIH0gPSB1c2VTV1IoXG4gICAgW2NoYXRLZXksIFwibWVzc2FnZXNcIl0sXG4gICAgbnVsbCxcbiAgICB7IGZhbGxiYWNrRGF0YTogaW5pdGlhbE1lc3NhZ2VzICE9IG51bGwgPyBpbml0aWFsTWVzc2FnZXMgOiBpbml0aWFsTWVzc2FnZXNGYWxsYmFjayB9XG4gICk7XG4gIGNvbnN0IHsgZGF0YTogaXNMb2FkaW5nID0gZmFsc2UsIG11dGF0ZTogbXV0YXRlTG9hZGluZyB9ID0gdXNlU1dSKFxuICAgIFtjaGF0S2V5LCBcImxvYWRpbmdcIl0sXG4gICAgbnVsbFxuICApO1xuICBjb25zdCB7IGRhdGE6IHN0cmVhbURhdGEsIG11dGF0ZTogbXV0YXRlU3RyZWFtRGF0YSB9ID0gdXNlU1dSKFtjaGF0S2V5LCBcInN0cmVhbURhdGFcIl0sIG51bGwpO1xuICBjb25zdCB7IGRhdGE6IGVycm9yID0gdm9pZCAwLCBtdXRhdGU6IHNldEVycm9yIH0gPSB1c2VTV1IoW2NoYXRLZXksIFwiZXJyb3JcIl0sIG51bGwpO1xuICBjb25zdCBtZXNzYWdlc1JlZiA9IHVzZVJlZihtZXNzYWdlcyB8fCBbXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbWVzc2FnZXNSZWYuY3VycmVudCA9IG1lc3NhZ2VzIHx8IFtdO1xuICB9LCBbbWVzc2FnZXNdKTtcbiAgY29uc3QgYWJvcnRDb250cm9sbGVyUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBleHRyYU1ldGFkYXRhUmVmID0gdXNlUmVmKHtcbiAgICBjcmVkZW50aWFscyxcbiAgICBoZWFkZXJzLFxuICAgIGJvZHlcbiAgfSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZXh0cmFNZXRhZGF0YVJlZi5jdXJyZW50ID0ge1xuICAgICAgY3JlZGVudGlhbHMsXG4gICAgICBoZWFkZXJzLFxuICAgICAgYm9keVxuICAgIH07XG4gIH0sIFtjcmVkZW50aWFscywgaGVhZGVycywgYm9keV0pO1xuICBjb25zdCB0cmlnZ2VyUmVxdWVzdCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChjaGF0UmVxdWVzdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbXV0YXRlTG9hZGluZyh0cnVlKTtcbiAgICAgICAgc2V0RXJyb3Iodm9pZCAwKTtcbiAgICAgICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICBhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudCA9IGFib3J0Q29udHJvbGxlcjtcbiAgICAgICAgYXdhaXQgcHJvY2Vzc0NoYXRTdHJlYW0oe1xuICAgICAgICAgIGdldFN0cmVhbWVkUmVzcG9uc2U6ICgpID0+IGdldFN0cmVhbWVkUmVzcG9uc2UoXG4gICAgICAgICAgICBhcGksXG4gICAgICAgICAgICBjaGF0UmVxdWVzdCxcbiAgICAgICAgICAgIG11dGF0ZSxcbiAgICAgICAgICAgIG11dGF0ZVN0cmVhbURhdGEsXG4gICAgICAgICAgICBzdHJlYW1EYXRhLFxuICAgICAgICAgICAgZXh0cmFNZXRhZGF0YVJlZixcbiAgICAgICAgICAgIG1lc3NhZ2VzUmVmLFxuICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyUmVmLFxuICAgICAgICAgICAgZ2VuZXJhdGVJZDIsXG4gICAgICAgICAgICBvbkZpbmlzaCxcbiAgICAgICAgICAgIG9uUmVzcG9uc2UsXG4gICAgICAgICAgICBzZW5kRXh0cmFNZXNzYWdlRmllbGRzXG4gICAgICAgICAgKSxcbiAgICAgICAgICBleHBlcmltZW50YWxfb25GdW5jdGlvbkNhbGwsXG4gICAgICAgICAgZXhwZXJpbWVudGFsX29uVG9vbENhbGwsXG4gICAgICAgICAgdXBkYXRlQ2hhdFJlcXVlc3Q6IChjaGF0UmVxdWVzdFBhcmFtKSA9PiB7XG4gICAgICAgICAgICBjaGF0UmVxdWVzdCA9IGNoYXRSZXF1ZXN0UGFyYW07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXRDdXJyZW50TWVzc2FnZXM6ICgpID0+IG1lc3NhZ2VzUmVmLmN1cnJlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoZXJyLm5hbWUgPT09IFwiQWJvcnRFcnJvclwiKSB7XG4gICAgICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbkVycm9yICYmIGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHNldEVycm9yKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBtdXRhdGVMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIG11dGF0ZSxcbiAgICAgIG11dGF0ZUxvYWRpbmcsXG4gICAgICBhcGksXG4gICAgICBleHRyYU1ldGFkYXRhUmVmLFxuICAgICAgb25SZXNwb25zZSxcbiAgICAgIG9uRmluaXNoLFxuICAgICAgb25FcnJvcixcbiAgICAgIHNldEVycm9yLFxuICAgICAgbXV0YXRlU3RyZWFtRGF0YSxcbiAgICAgIHN0cmVhbURhdGEsXG4gICAgICBzZW5kRXh0cmFNZXNzYWdlRmllbGRzLFxuICAgICAgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsLFxuICAgICAgZXhwZXJpbWVudGFsX29uVG9vbENhbGwsXG4gICAgICBtZXNzYWdlc1JlZixcbiAgICAgIGFib3J0Q29udHJvbGxlclJlZixcbiAgICAgIGdlbmVyYXRlSWQyXG4gICAgXVxuICApO1xuICBjb25zdCBhcHBlbmQgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAobWVzc2FnZSwge1xuICAgICAgb3B0aW9ucyxcbiAgICAgIGZ1bmN0aW9ucyxcbiAgICAgIGZ1bmN0aW9uX2NhbGwsXG4gICAgICB0b29scyxcbiAgICAgIHRvb2xfY2hvaWNlLFxuICAgICAgZGF0YVxuICAgIH0gPSB7fSkgPT4ge1xuICAgICAgaWYgKCFtZXNzYWdlLmlkKSB7XG4gICAgICAgIG1lc3NhZ2UuaWQgPSBnZW5lcmF0ZUlkMigpO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hhdFJlcXVlc3QgPSB7XG4gICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlc1JlZi5jdXJyZW50LmNvbmNhdChtZXNzYWdlKSxcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgLi4uZnVuY3Rpb25zICE9PSB2b2lkIDAgJiYgeyBmdW5jdGlvbnMgfSxcbiAgICAgICAgLi4uZnVuY3Rpb25fY2FsbCAhPT0gdm9pZCAwICYmIHsgZnVuY3Rpb25fY2FsbCB9LFxuICAgICAgICAuLi50b29scyAhPT0gdm9pZCAwICYmIHsgdG9vbHMgfSxcbiAgICAgICAgLi4udG9vbF9jaG9pY2UgIT09IHZvaWQgMCAmJiB7IHRvb2xfY2hvaWNlIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gdHJpZ2dlclJlcXVlc3QoY2hhdFJlcXVlc3QpO1xuICAgIH0sXG4gICAgW3RyaWdnZXJSZXF1ZXN0LCBnZW5lcmF0ZUlkMl1cbiAgKTtcbiAgY29uc3QgcmVsb2FkID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKHtcbiAgICAgIG9wdGlvbnMsXG4gICAgICBmdW5jdGlvbnMsXG4gICAgICBmdW5jdGlvbl9jYWxsLFxuICAgICAgdG9vbHMsXG4gICAgICB0b29sX2Nob2ljZVxuICAgIH0gPSB7fSkgPT4ge1xuICAgICAgaWYgKG1lc3NhZ2VzUmVmLmN1cnJlbnQubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGNvbnN0IGxhc3RNZXNzYWdlID0gbWVzc2FnZXNSZWYuY3VycmVudFttZXNzYWdlc1JlZi5jdXJyZW50Lmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGxhc3RNZXNzYWdlLnJvbGUgPT09IFwiYXNzaXN0YW50XCIpIHtcbiAgICAgICAgY29uc3QgY2hhdFJlcXVlc3QyID0ge1xuICAgICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlc1JlZi5jdXJyZW50LnNsaWNlKDAsIC0xKSxcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgIC4uLmZ1bmN0aW9ucyAhPT0gdm9pZCAwICYmIHsgZnVuY3Rpb25zIH0sXG4gICAgICAgICAgLi4uZnVuY3Rpb25fY2FsbCAhPT0gdm9pZCAwICYmIHsgZnVuY3Rpb25fY2FsbCB9LFxuICAgICAgICAgIC4uLnRvb2xzICE9PSB2b2lkIDAgJiYgeyB0b29scyB9LFxuICAgICAgICAgIC4uLnRvb2xfY2hvaWNlICE9PSB2b2lkIDAgJiYgeyB0b29sX2Nob2ljZSB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0cmlnZ2VyUmVxdWVzdChjaGF0UmVxdWVzdDIpO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hhdFJlcXVlc3QgPSB7XG4gICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlc1JlZi5jdXJyZW50LFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICAuLi5mdW5jdGlvbnMgIT09IHZvaWQgMCAmJiB7IGZ1bmN0aW9ucyB9LFxuICAgICAgICAuLi5mdW5jdGlvbl9jYWxsICE9PSB2b2lkIDAgJiYgeyBmdW5jdGlvbl9jYWxsIH0sXG4gICAgICAgIC4uLnRvb2xzICE9PSB2b2lkIDAgJiYgeyB0b29scyB9LFxuICAgICAgICAuLi50b29sX2Nob2ljZSAhPT0gdm9pZCAwICYmIHsgdG9vbF9jaG9pY2UgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiB0cmlnZ2VyUmVxdWVzdChjaGF0UmVxdWVzdCk7XG4gICAgfSxcbiAgICBbdHJpZ2dlclJlcXVlc3RdXG4gICk7XG4gIGNvbnN0IHN0b3AgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50KSB7XG4gICAgICBhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudC5hYm9ydCgpO1xuICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBzZXRNZXNzYWdlcyA9IHVzZUNhbGxiYWNrKFxuICAgIChtZXNzYWdlczIpID0+IHtcbiAgICAgIG11dGF0ZShtZXNzYWdlczIsIGZhbHNlKTtcbiAgICAgIG1lc3NhZ2VzUmVmLmN1cnJlbnQgPSBtZXNzYWdlczI7XG4gICAgfSxcbiAgICBbbXV0YXRlXVxuICApO1xuICBjb25zdCBbaW5wdXQsIHNldElucHV0XSA9IHVzZVN0YXRlKGluaXRpYWxJbnB1dCk7XG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IHVzZUNhbGxiYWNrKFxuICAgIChlLCBvcHRpb25zID0ge30sIG1ldGFkYXRhKSA9PiB7XG4gICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgZXh0cmFNZXRhZGF0YVJlZi5jdXJyZW50ID0ge1xuICAgICAgICAgIC4uLmV4dHJhTWV0YWRhdGFSZWYuY3VycmVudCxcbiAgICAgICAgICAuLi5tZXRhZGF0YVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKCFpbnB1dClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgYXBwZW5kKFxuICAgICAgICB7XG4gICAgICAgICAgY29udGVudDogaW5wdXQsXG4gICAgICAgICAgcm9sZTogXCJ1c2VyXCIsXG4gICAgICAgICAgY3JlYXRlZEF0OiAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKVxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgICAgc2V0SW5wdXQoXCJcIik7XG4gICAgfSxcbiAgICBbaW5wdXQsIGFwcGVuZF1cbiAgKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRDaGFuZ2UgPSAoZSkgPT4ge1xuICAgIHNldElucHV0KGUudGFyZ2V0LnZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlczogbWVzc2FnZXMgfHwgW10sXG4gICAgZXJyb3IsXG4gICAgYXBwZW5kLFxuICAgIHJlbG9hZCxcbiAgICBzdG9wLFxuICAgIHNldE1lc3NhZ2VzLFxuICAgIGlucHV0LFxuICAgIHNldElucHV0LFxuICAgIGhhbmRsZUlucHV0Q2hhbmdlLFxuICAgIGhhbmRsZVN1Ym1pdCxcbiAgICBpc0xvYWRpbmcsXG4gICAgZGF0YTogc3RyZWFtRGF0YVxuICB9O1xufVxuXG4vLyByZWFjdC91c2UtY29tcGxldGlvbi50c1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgYXMgdXNlQ2FsbGJhY2syLCB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0MiwgdXNlSWQgYXMgdXNlSWQyLCB1c2VSZWYgYXMgdXNlUmVmMiwgdXNlU3RhdGUgYXMgdXNlU3RhdGUyIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdXNlU1dSMiBmcm9tIFwic3dyXCI7XG5cbi8vIHNoYXJlZC9jYWxsLWNvbXBsZXRpb24tYXBpLnRzXG5hc3luYyBmdW5jdGlvbiBjYWxsQ29tcGxldGlvbkFwaSh7XG4gIGFwaSxcbiAgcHJvbXB0LFxuICBjcmVkZW50aWFscyxcbiAgaGVhZGVycyxcbiAgYm9keSxcbiAgc2V0Q29tcGxldGlvbixcbiAgc2V0TG9hZGluZyxcbiAgc2V0RXJyb3IsXG4gIHNldEFib3J0Q29udHJvbGxlcixcbiAgb25SZXNwb25zZSxcbiAgb25GaW5pc2gsXG4gIG9uRXJyb3IsXG4gIG9uRGF0YVxufSkge1xuICB0cnkge1xuICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAgc2V0RXJyb3Iodm9pZCAwKTtcbiAgICBjb25zdCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgc2V0QWJvcnRDb250cm9sbGVyKGFib3J0Q29udHJvbGxlcik7XG4gICAgc2V0Q29tcGxldGlvbihcIlwiKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChhcGksIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHByb21wdCxcbiAgICAgICAgLi4uYm9keVxuICAgICAgfSksXG4gICAgICBjcmVkZW50aWFscyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIC4uLmhlYWRlcnNcbiAgICAgIH0sXG4gICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWxcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfSk7XG4gICAgaWYgKG9uUmVzcG9uc2UpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IG9uUmVzcG9uc2UocmVzKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGF3YWl0IHJlcy50ZXh0KCkgfHwgXCJGYWlsZWQgdG8gZmV0Y2ggdGhlIGNoYXQgcmVzcG9uc2UuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghcmVzLmJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSByZXNwb25zZSBib2R5IGlzIGVtcHR5LlwiKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgY29uc3QgcmVhZGVyID0gcmVzLmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgZm9yIGF3YWl0IChjb25zdCB7IHR5cGUsIHZhbHVlIH0gb2YgcmVhZERhdGFTdHJlYW0ocmVhZGVyLCB7XG4gICAgICBpc0Fib3J0ZWQ6ICgpID0+IGFib3J0Q29udHJvbGxlciA9PT0gbnVsbFxuICAgIH0pKSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInRleHRcIjoge1xuICAgICAgICAgIHJlc3VsdCArPSB2YWx1ZTtcbiAgICAgICAgICBzZXRDb21wbGV0aW9uKHJlc3VsdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImRhdGFcIjoge1xuICAgICAgICAgIG9uRGF0YSA9PSBudWxsID8gdm9pZCAwIDogb25EYXRhKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAob25GaW5pc2gpIHtcbiAgICAgIG9uRmluaXNoKHByb21wdCwgcmVzdWx0KTtcbiAgICB9XG4gICAgc2V0QWJvcnRDb250cm9sbGVyKG51bGwpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIubmFtZSA9PT0gXCJBYm9ydEVycm9yXCIpIHtcbiAgICAgIHNldEFib3J0Q29udHJvbGxlcihudWxsKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2V0RXJyb3IoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgfVxufVxuXG4vLyByZWFjdC91c2UtY29tcGxldGlvbi50c1xuZnVuY3Rpb24gdXNlQ29tcGxldGlvbih7XG4gIGFwaSA9IFwiL2FwaS9jb21wbGV0aW9uXCIsXG4gIGlkLFxuICBpbml0aWFsQ29tcGxldGlvbiA9IFwiXCIsXG4gIGluaXRpYWxJbnB1dCA9IFwiXCIsXG4gIGNyZWRlbnRpYWxzLFxuICBoZWFkZXJzLFxuICBib2R5LFxuICBvblJlc3BvbnNlLFxuICBvbkZpbmlzaCxcbiAgb25FcnJvclxufSA9IHt9KSB7XG4gIGNvbnN0IGhvb2tJZCA9IHVzZUlkMigpO1xuICBjb25zdCBjb21wbGV0aW9uSWQgPSBpZCB8fCBob29rSWQ7XG4gIGNvbnN0IHsgZGF0YSwgbXV0YXRlIH0gPSB1c2VTV1IyKFthcGksIGNvbXBsZXRpb25JZF0sIG51bGwsIHtcbiAgICBmYWxsYmFja0RhdGE6IGluaXRpYWxDb21wbGV0aW9uXG4gIH0pO1xuICBjb25zdCB7IGRhdGE6IGlzTG9hZGluZyA9IGZhbHNlLCBtdXRhdGU6IG11dGF0ZUxvYWRpbmcgfSA9IHVzZVNXUjIoXG4gICAgW2NvbXBsZXRpb25JZCwgXCJsb2FkaW5nXCJdLFxuICAgIG51bGxcbiAgKTtcbiAgY29uc3QgeyBkYXRhOiBzdHJlYW1EYXRhLCBtdXRhdGU6IG11dGF0ZVN0cmVhbURhdGEgfSA9IHVzZVNXUjIoW2NvbXBsZXRpb25JZCwgXCJzdHJlYW1EYXRhXCJdLCBudWxsKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTIodm9pZCAwKTtcbiAgY29uc3QgY29tcGxldGlvbiA9IGRhdGE7XG4gIGNvbnN0IFthYm9ydENvbnRyb2xsZXIsIHNldEFib3J0Q29udHJvbGxlcl0gPSB1c2VTdGF0ZTIobnVsbCk7XG4gIGNvbnN0IGV4dHJhTWV0YWRhdGFSZWYgPSB1c2VSZWYyKHtcbiAgICBjcmVkZW50aWFscyxcbiAgICBoZWFkZXJzLFxuICAgIGJvZHlcbiAgfSk7XG4gIHVzZUVmZmVjdDIoKCkgPT4ge1xuICAgIGV4dHJhTWV0YWRhdGFSZWYuY3VycmVudCA9IHtcbiAgICAgIGNyZWRlbnRpYWxzLFxuICAgICAgaGVhZGVycyxcbiAgICAgIGJvZHlcbiAgICB9O1xuICB9LCBbY3JlZGVudGlhbHMsIGhlYWRlcnMsIGJvZHldKTtcbiAgY29uc3QgdHJpZ2dlclJlcXVlc3QgPSB1c2VDYWxsYmFjazIoXG4gICAgYXN5bmMgKHByb21wdCwgb3B0aW9ucykgPT4gY2FsbENvbXBsZXRpb25BcGkoe1xuICAgICAgYXBpLFxuICAgICAgcHJvbXB0LFxuICAgICAgY3JlZGVudGlhbHM6IGV4dHJhTWV0YWRhdGFSZWYuY3VycmVudC5jcmVkZW50aWFscyxcbiAgICAgIGhlYWRlcnM6IHsgLi4uZXh0cmFNZXRhZGF0YVJlZi5jdXJyZW50LmhlYWRlcnMsIC4uLm9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGVycyB9LFxuICAgICAgYm9keToge1xuICAgICAgICAuLi5leHRyYU1ldGFkYXRhUmVmLmN1cnJlbnQuYm9keSxcbiAgICAgICAgLi4ub3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5ib2R5XG4gICAgICB9LFxuICAgICAgc2V0Q29tcGxldGlvbjogKGNvbXBsZXRpb24yKSA9PiBtdXRhdGUoY29tcGxldGlvbjIsIGZhbHNlKSxcbiAgICAgIHNldExvYWRpbmc6IG11dGF0ZUxvYWRpbmcsXG4gICAgICBzZXRFcnJvcixcbiAgICAgIHNldEFib3J0Q29udHJvbGxlcixcbiAgICAgIG9uUmVzcG9uc2UsXG4gICAgICBvbkZpbmlzaCxcbiAgICAgIG9uRXJyb3IsXG4gICAgICBvbkRhdGE6IChkYXRhMikgPT4ge1xuICAgICAgICBtdXRhdGVTdHJlYW1EYXRhKFsuLi5zdHJlYW1EYXRhIHx8IFtdLCAuLi5kYXRhMiB8fCBbXV0sIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBbXG4gICAgICBtdXRhdGUsXG4gICAgICBtdXRhdGVMb2FkaW5nLFxuICAgICAgYXBpLFxuICAgICAgZXh0cmFNZXRhZGF0YVJlZixcbiAgICAgIHNldEFib3J0Q29udHJvbGxlcixcbiAgICAgIG9uUmVzcG9uc2UsXG4gICAgICBvbkZpbmlzaCxcbiAgICAgIG9uRXJyb3IsXG4gICAgICBzZXRFcnJvcixcbiAgICAgIHN0cmVhbURhdGEsXG4gICAgICBtdXRhdGVTdHJlYW1EYXRhXG4gICAgXVxuICApO1xuICBjb25zdCBzdG9wID0gdXNlQ2FsbGJhY2syKCgpID0+IHtcbiAgICBpZiAoYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIHNldEFib3J0Q29udHJvbGxlcihudWxsKTtcbiAgICB9XG4gIH0sIFthYm9ydENvbnRyb2xsZXJdKTtcbiAgY29uc3Qgc2V0Q29tcGxldGlvbiA9IHVzZUNhbGxiYWNrMihcbiAgICAoY29tcGxldGlvbjIpID0+IHtcbiAgICAgIG11dGF0ZShjb21wbGV0aW9uMiwgZmFsc2UpO1xuICAgIH0sXG4gICAgW211dGF0ZV1cbiAgKTtcbiAgY29uc3QgY29tcGxldGUgPSB1c2VDYWxsYmFjazIoXG4gICAgYXN5bmMgKHByb21wdCwgb3B0aW9ucykgPT4ge1xuICAgICAgcmV0dXJuIHRyaWdnZXJSZXF1ZXN0KHByb21wdCwgb3B0aW9ucyk7XG4gICAgfSxcbiAgICBbdHJpZ2dlclJlcXVlc3RdXG4gICk7XG4gIGNvbnN0IFtpbnB1dCwgc2V0SW5wdXRdID0gdXNlU3RhdGUyKGluaXRpYWxJbnB1dCk7XG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IHVzZUNhbGxiYWNrMihcbiAgICAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKCFpbnB1dClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlKGlucHV0KTtcbiAgICB9LFxuICAgIFtpbnB1dCwgY29tcGxldGVdXG4gICk7XG4gIGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gKGUpID0+IHtcbiAgICBzZXRJbnB1dChlLnRhcmdldC52YWx1ZSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgY29tcGxldGlvbixcbiAgICBjb21wbGV0ZSxcbiAgICBlcnJvcixcbiAgICBzZXRDb21wbGV0aW9uLFxuICAgIHN0b3AsXG4gICAgaW5wdXQsXG4gICAgc2V0SW5wdXQsXG4gICAgaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgaGFuZGxlU3VibWl0LFxuICAgIGlzTG9hZGluZyxcbiAgICBkYXRhOiBzdHJlYW1EYXRhXG4gIH07XG59XG5cbi8vIHJlYWN0L3VzZS1hc3Npc3RhbnQudHNcbmltcG9ydCB7IHVzZVN0YXRlIGFzIHVzZVN0YXRlMyB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlQXNzaXN0YW50KHtcbiAgYXBpLFxuICB0aHJlYWRJZDogdGhyZWFkSWRQYXJhbSxcbiAgY3JlZGVudGlhbHMsXG4gIGhlYWRlcnMsXG4gIGJvZHksXG4gIG9uRXJyb3Jcbn0pIHtcbiAgY29uc3QgW21lc3NhZ2VzLCBzZXRNZXNzYWdlc10gPSB1c2VTdGF0ZTMoW10pO1xuICBjb25zdCBbaW5wdXQsIHNldElucHV0XSA9IHVzZVN0YXRlMyhcIlwiKTtcbiAgY29uc3QgW3RocmVhZElkLCBzZXRUaHJlYWRJZF0gPSB1c2VTdGF0ZTModm9pZCAwKTtcbiAgY29uc3QgW3N0YXR1cywgc2V0U3RhdHVzXSA9IHVzZVN0YXRlMyhcImF3YWl0aW5nX21lc3NhZ2VcIik7XG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUzKHZvaWQgMCk7XG4gIGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgc2V0SW5wdXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgfTtcbiAgY29uc3Qgc3VibWl0TWVzc2FnZSA9IGFzeW5jIChldmVudCwgcmVxdWVzdE9wdGlvbnMpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIChfYSA9IGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC5wcmV2ZW50RGVmYXVsdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmNhbGwoZXZlbnQpO1xuICAgIGlmIChpbnB1dCA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRTdGF0dXMoXCJpbl9wcm9ncmVzc1wiKTtcbiAgICBzZXRNZXNzYWdlcygobWVzc2FnZXMyKSA9PiBbXG4gICAgICAuLi5tZXNzYWdlczIsXG4gICAgICB7IGlkOiBcIlwiLCByb2xlOiBcInVzZXJcIiwgY29udGVudDogaW5wdXQgfVxuICAgIF0pO1xuICAgIHNldElucHV0KFwiXCIpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZldGNoKGFwaSwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGNyZWRlbnRpYWxzLFxuICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiwgLi4uaGVhZGVycyB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAuLi5ib2R5LFxuICAgICAgICAvLyBhbHdheXMgdXNlIHVzZXItcHJvdmlkZWQgdGhyZWFkSWQgd2hlbiBhdmFpbGFibGU6XG4gICAgICAgIHRocmVhZElkOiAoX2IgPSB0aHJlYWRJZFBhcmFtICE9IG51bGwgPyB0aHJlYWRJZFBhcmFtIDogdGhyZWFkSWQpICE9IG51bGwgPyBfYiA6IG51bGwsXG4gICAgICAgIG1lc3NhZ2U6IGlucHV0LFxuICAgICAgICAvLyBvcHRpb25hbCByZXF1ZXN0IGRhdGE6XG4gICAgICAgIGRhdGE6IHJlcXVlc3RPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiByZXF1ZXN0T3B0aW9ucy5kYXRhXG4gICAgICB9KVxuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuYm9keSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcmVzcG9uc2UgYm9keSBpcyBlbXB0eS5cIik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBmb3IgYXdhaXQgKGNvbnN0IHsgdHlwZSwgdmFsdWUgfSBvZiByZWFkRGF0YVN0cmVhbShcbiAgICAgICAgcmVzdWx0LmJvZHkuZ2V0UmVhZGVyKClcbiAgICAgICkpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSBcImFzc2lzdGFudF9tZXNzYWdlXCI6IHtcbiAgICAgICAgICAgIHNldE1lc3NhZ2VzKChtZXNzYWdlczIpID0+IFtcbiAgICAgICAgICAgICAgLi4ubWVzc2FnZXMyLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6IHZhbHVlLmlkLFxuICAgICAgICAgICAgICAgIHJvbGU6IHZhbHVlLnJvbGUsXG4gICAgICAgICAgICAgICAgY29udGVudDogdmFsdWUuY29udGVudFswXS50ZXh0LnZhbHVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6IHtcbiAgICAgICAgICAgIHNldE1lc3NhZ2VzKChtZXNzYWdlczIpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgbGFzdE1lc3NhZ2UgPSBtZXNzYWdlczJbbWVzc2FnZXMyLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC4uLm1lc3NhZ2VzMi5zbGljZSgwLCBtZXNzYWdlczIubGVuZ3RoIC0gMSksXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgaWQ6IGxhc3RNZXNzYWdlLmlkLFxuICAgICAgICAgICAgICAgICAgcm9sZTogbGFzdE1lc3NhZ2Uucm9sZSxcbiAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGxhc3RNZXNzYWdlLmNvbnRlbnQgKyB2YWx1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJkYXRhX21lc3NhZ2VcIjoge1xuICAgICAgICAgICAgc2V0TWVzc2FnZXMoKG1lc3NhZ2VzMikgPT4ge1xuICAgICAgICAgICAgICB2YXIgX2EyO1xuICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC4uLm1lc3NhZ2VzMixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpZDogKF9hMiA9IHZhbHVlLmlkKSAhPSBudWxsID8gX2EyIDogZ2VuZXJhdGVJZCgpLFxuICAgICAgICAgICAgICAgICAgcm9sZTogXCJkYXRhXCIsXG4gICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiLFxuICAgICAgICAgICAgICAgICAgZGF0YTogdmFsdWUuZGF0YVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJhc3Npc3RhbnRfY29udHJvbF9kYXRhXCI6IHtcbiAgICAgICAgICAgIHNldFRocmVhZElkKHZhbHVlLnRocmVhZElkKTtcbiAgICAgICAgICAgIHNldE1lc3NhZ2VzKChtZXNzYWdlczIpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgbGFzdE1lc3NhZ2UgPSBtZXNzYWdlczJbbWVzc2FnZXMyLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICBsYXN0TWVzc2FnZS5pZCA9IHZhbHVlLm1lc3NhZ2VJZDtcbiAgICAgICAgICAgICAgcmV0dXJuIFsuLi5tZXNzYWdlczIuc2xpY2UoMCwgbWVzc2FnZXMyLmxlbmd0aCAtIDEpLCBsYXN0TWVzc2FnZV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiZXJyb3JcIjoge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JPYmogPSBuZXcgRXJyb3IodmFsdWUpO1xuICAgICAgICAgICAgc2V0RXJyb3IoZXJyb3JPYmopO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IyKSB7XG4gICAgICBpZiAob25FcnJvciAmJiBlcnJvcjIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBvbkVycm9yKGVycm9yMik7XG4gICAgICB9XG4gICAgICBzZXRFcnJvcihlcnJvcjIpO1xuICAgIH1cbiAgICBzZXRTdGF0dXMoXCJhd2FpdGluZ19tZXNzYWdlXCIpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIG1lc3NhZ2VzLFxuICAgIHNldE1lc3NhZ2VzLFxuICAgIHRocmVhZElkLFxuICAgIGlucHV0LFxuICAgIHNldElucHV0LFxuICAgIGhhbmRsZUlucHV0Q2hhbmdlLFxuICAgIHN1Ym1pdE1lc3NhZ2UsXG4gICAgc3RhdHVzLFxuICAgIGVycm9yXG4gIH07XG59XG52YXIgZXhwZXJpbWVudGFsX3VzZUFzc2lzdGFudCA9IHVzZUFzc2lzdGFudDtcbmV4cG9ydCB7XG4gIGV4cGVyaW1lbnRhbF91c2VBc3Npc3RhbnQsXG4gIHVzZUFzc2lzdGFudCxcbiAgdXNlQ2hhdCxcbiAgdXNlQ29tcGxldGlvblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOlsidXNlQ2FsbGJhY2siLCJ1c2VFZmZlY3QiLCJ1c2VJZCIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlU1dSIiwidGV4dFN0cmVhbVBhcnQiLCJjb2RlIiwibmFtZSIsInBhcnNlIiwidmFsdWUiLCJFcnJvciIsInR5cGUiLCJmdW5jdGlvbkNhbGxTdHJlYW1QYXJ0IiwiZnVuY3Rpb25fY2FsbCIsImFyZ3VtZW50cyIsImRhdGFTdHJlYW1QYXJ0IiwiQXJyYXkiLCJpc0FycmF5IiwiZXJyb3JTdHJlYW1QYXJ0IiwiYXNzaXN0YW50TWVzc2FnZVN0cmVhbVBhcnQiLCJpZCIsInJvbGUiLCJjb250ZW50IiwiZXZlcnkiLCJpdGVtIiwidGV4dCIsImFzc2lzdGFudENvbnRyb2xEYXRhU3RyZWFtUGFydCIsInRocmVhZElkIiwibWVzc2FnZUlkIiwiZGF0YU1lc3NhZ2VTdHJlYW1QYXJ0IiwidG9vbENhbGxTdHJlYW1QYXJ0IiwidG9vbF9jYWxscyIsInNvbWUiLCJ0YyIsImZ1bmN0aW9uIiwibWVzc2FnZUFubm90YXRpb25zU3RyZWFtUGFydCIsInN0cmVhbVBhcnRzIiwic3RyZWFtUGFydHNCeUNvZGUiLCJTdHJlYW1TdHJpbmdQcmVmaXhlcyIsInZhbGlkQ29kZXMiLCJtYXAiLCJwYXJ0IiwicGFyc2VTdHJlYW1QYXJ0IiwibGluZSIsImZpcnN0U2VwYXJhdG9ySW5kZXgiLCJpbmRleE9mIiwicHJlZml4Iiwic2xpY2UiLCJpbmNsdWRlcyIsInRleHRWYWx1ZSIsImpzb25WYWx1ZSIsIkpTT04iLCJORVdMSU5FIiwiY2hhckNvZGVBdCIsImNvbmNhdENodW5rcyIsImNodW5rcyIsInRvdGFsTGVuZ3RoIiwiY29uY2F0ZW5hdGVkQ2h1bmtzIiwiVWludDhBcnJheSIsIm9mZnNldCIsImNodW5rIiwic2V0IiwibGVuZ3RoIiwicmVhZERhdGFTdHJlYW0iLCJyZWFkZXIiLCJpc0Fib3J0ZWQiLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJyZWFkIiwicHVzaCIsInN0cmVhbVBhcnRzMiIsImRlY29kZSIsInN0cmVhbSIsInNwbGl0IiwiZmlsdGVyIiwic3RyZWFtUGFydCIsImNhbmNlbCIsImN1c3RvbUFscGhhYmV0IiwiZ2VuZXJhdGVJZCIsImFzc2lnbkFubm90YXRpb25zVG9NZXNzYWdlIiwibWVzc2FnZSIsImFubm90YXRpb25zIiwicGFyc2VDb21wbGV4UmVzcG9uc2UiLCJhYm9ydENvbnRyb2xsZXJSZWYiLCJ1cGRhdGUiLCJvbkZpbmlzaCIsImdlbmVyYXRlSWQyIiwiZ2V0Q3VycmVudERhdGUiLCJEYXRlIiwiY3JlYXRlZEF0IiwicHJlZml4TWFwIiwiZGF0YSIsIm1lc3NhZ2VfYW5ub3RhdGlvbnMiLCJjdXJyZW50IiwiZnVuY3Rpb25DYWxsTWVzc2FnZSIsInRvb2xDYWxsTWVzc2FnZSIsInJlc3BvbnNlTWVzc2FnZSIsIm1lc3NhZ2VQcmVmaXhLZXlzIiwiZm9yRWFjaCIsImtleSIsIm1lcmdlZCIsIkJvb2xlYW4iLCJtZXNzYWdlcyIsImNhbGxDaGF0QXBpIiwiYXBpIiwiYm9keSIsImNyZWRlbnRpYWxzIiwiaGVhZGVycyIsImFib3J0Q29udHJvbGxlciIsInJlc3RvcmVNZXNzYWdlc09uRmFpbHVyZSIsIm9uUmVzcG9uc2UiLCJvblVwZGF0ZSIsIl9hIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsInN0cmluZ2lmeSIsInNpZ25hbCIsImNhdGNoIiwiZXJyIiwib2siLCJnZXRSZWFkZXIiLCJwcm9jZXNzQ2hhdFN0cmVhbSIsImdldFN0cmVhbWVkUmVzcG9uc2UiLCJnZXRTdHJlYW1lZFJlc3BvbnNlMiIsImV4cGVyaW1lbnRhbF9vbkZ1bmN0aW9uQ2FsbCIsImV4cGVyaW1lbnRhbF9vblRvb2xDYWxsIiwidXBkYXRlQ2hhdFJlcXVlc3QiLCJnZXRDdXJyZW50TWVzc2FnZXMiLCJtZXNzYWdlc0FuZERhdGFPckp1c3RNZXNzYWdlIiwiaGFzRm9sbG93aW5nUmVzcG9uc2UiLCJmdW5jdGlvbkNhbGwiLCJjb25zb2xlIiwid2FybiIsImZ1bmN0aW9uQ2FsbFJlc3BvbnNlIiwidG9vbENhbGxzIiwidG9vbENhbGwiLCJ0b29sQ2FsbFJlc3BvbnNlIiwiZml4RnVuY3Rpb25DYWxsQXJndW1lbnRzMiIsImZpeEZ1bmN0aW9uQ2FsbEFyZ3VtZW50cyIsInN0cmVhbWVkUmVzcG9uc2VNZXNzYWdlIiwiY2hhdFJlcXVlc3QiLCJtdXRhdGUiLCJtdXRhdGVTdHJlYW1EYXRhIiwiZXhpc3RpbmdEYXRhIiwiZXh0cmFNZXRhZGF0YVJlZiIsIm1lc3NhZ2VzUmVmIiwic2VuZEV4dHJhTWVzc2FnZUZpZWxkcyIsIl9iIiwicHJldmlvdXNNZXNzYWdlcyIsImNvbnN0cnVjdGVkTWVzc2FnZXNQYXlsb2FkIiwidG9vbF9jYWxsX2lkIiwicmVwbHlJZCIsInJlYWRSb3ciLCJwcm9taXNlIiwidWkiLCJuZXh0IiwiZSIsIm9wdGlvbnMiLCJmdW5jdGlvbnMiLCJ0b29scyIsInRvb2xfY2hvaWNlIiwidXNlQ2hhdCIsImluaXRpYWxNZXNzYWdlcyIsImluaXRpYWxJbnB1dCIsIm9uRXJyb3IiLCJob29rSWQiLCJpZEtleSIsImNoYXRLZXkiLCJpbml0aWFsTWVzc2FnZXNGYWxsYmFjayIsImZhbGxiYWNrRGF0YSIsImlzTG9hZGluZyIsIm11dGF0ZUxvYWRpbmciLCJzdHJlYW1EYXRhIiwiZXJyb3IiLCJzZXRFcnJvciIsInRyaWdnZXJSZXF1ZXN0IiwiQWJvcnRDb250cm9sbGVyIiwiY2hhdFJlcXVlc3RQYXJhbSIsImFwcGVuZCIsImNvbmNhdCIsInJlbG9hZCIsImxhc3RNZXNzYWdlIiwiY2hhdFJlcXVlc3QyIiwic3RvcCIsImFib3J0Iiwic2V0TWVzc2FnZXMiLCJtZXNzYWdlczIiLCJpbnB1dCIsInNldElucHV0IiwiaGFuZGxlU3VibWl0IiwibWV0YWRhdGEiLCJwcmV2ZW50RGVmYXVsdCIsImhhbmRsZUlucHV0Q2hhbmdlIiwidGFyZ2V0IiwidXNlQ2FsbGJhY2syIiwidXNlRWZmZWN0MiIsInVzZUlkMiIsInVzZVJlZjIiLCJ1c2VTdGF0ZTIiLCJ1c2VTV1IyIiwiY2FsbENvbXBsZXRpb25BcGkiLCJwcm9tcHQiLCJzZXRDb21wbGV0aW9uIiwic2V0TG9hZGluZyIsInNldEFib3J0Q29udHJvbGxlciIsIm9uRGF0YSIsInJlcyIsInJlc3VsdCIsInVzZUNvbXBsZXRpb24iLCJpbml0aWFsQ29tcGxldGlvbiIsImNvbXBsZXRpb25JZCIsImNvbXBsZXRpb24iLCJjb21wbGV0aW9uMiIsImRhdGEyIiwiY29tcGxldGUiLCJ1c2VTdGF0ZTMiLCJ1c2VBc3Npc3RhbnQiLCJ0aHJlYWRJZFBhcmFtIiwic2V0VGhyZWFkSWQiLCJzdGF0dXMiLCJzZXRTdGF0dXMiLCJldmVudCIsInN1Ym1pdE1lc3NhZ2UiLCJyZXF1ZXN0T3B0aW9ucyIsImNhbGwiLCJfYTIiLCJlcnJvck9iaiIsImVycm9yMiIsImV4cGVyaW1lbnRhbF91c2VBc3Npc3RhbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ai/react/dist/index.mjs\n");

/***/ })

};
;